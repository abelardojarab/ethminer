// (C) 1992-2017 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 

// Generated by Intel(R) FPGA SDK for OpenCL(TM), Version 17.1.0 Build 240, Copyright (C) 2017 Intel Corporation

/////////////////////////////////////////////////////////////////
// MODULE CLMiner_kernel_stable_system
/////////////////////////////////////////////////////////////////
module CLMiner_kernel_stable_system
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   // AVS avs_ethash_calculate_dag_item_cra
   input logic avs_ethash_calculate_dag_item_cra_enable,
   input logic avs_ethash_calculate_dag_item_cra_read,
   input logic avs_ethash_calculate_dag_item_cra_write,
   input logic [3:0] avs_ethash_calculate_dag_item_cra_address,
   input logic [63:0] avs_ethash_calculate_dag_item_cra_writedata,
   input logic [7:0] avs_ethash_calculate_dag_item_cra_byteenable,
   output logic [63:0] avs_ethash_calculate_dag_item_cra_readdata,
   output logic avs_ethash_calculate_dag_item_cra_readdatavalid,
   // AVS avs_ethash_search_cra
   input logic avs_ethash_search_cra_enable,
   input logic avs_ethash_search_cra_read,
   input logic avs_ethash_search_cra_write,
   input logic [4:0] avs_ethash_search_cra_address,
   input logic [63:0] avs_ethash_search_cra_writedata,
   input logic [7:0] avs_ethash_search_cra_byteenable,
   output logic [63:0] avs_ethash_search_cra_readdata,
   output logic avs_ethash_search_cra_readdatavalid,
   output logic kernel_irq,
   output logic cc_snoop_ready,
   input logic cc_snoop_clk,
   input logic cc_snoop_valid,
   input logic [32:0] cc_snoop_data,
   // AVM avm_memgmem0_DDR_port_0_0_rw
   output logic avm_memgmem0_DDR_port_0_0_rw_enable,
   output logic avm_memgmem0_DDR_port_0_0_rw_read,
   output logic avm_memgmem0_DDR_port_0_0_rw_write,
   output logic [4:0] avm_memgmem0_DDR_port_0_0_rw_burstcount,
   output logic [31:0] avm_memgmem0_DDR_port_0_0_rw_address,
   output logic [511:0] avm_memgmem0_DDR_port_0_0_rw_writedata,
   output logic [63:0] avm_memgmem0_DDR_port_0_0_rw_byteenable,
   input logic avm_memgmem0_DDR_port_0_0_rw_waitrequest,
   input logic [511:0] avm_memgmem0_DDR_port_0_0_rw_readdata,
   input logic avm_memgmem0_DDR_port_0_0_rw_readdatavalid,
   input logic avm_memgmem0_DDR_port_0_0_rw_writeack,
   // AVM avm_memgmem0_DDR_port_1_0_rw
   output logic avm_memgmem0_DDR_port_1_0_rw_enable,
   output logic avm_memgmem0_DDR_port_1_0_rw_read,
   output logic avm_memgmem0_DDR_port_1_0_rw_write,
   output logic [4:0] avm_memgmem0_DDR_port_1_0_rw_burstcount,
   output logic [31:0] avm_memgmem0_DDR_port_1_0_rw_address,
   output logic [511:0] avm_memgmem0_DDR_port_1_0_rw_writedata,
   output logic [63:0] avm_memgmem0_DDR_port_1_0_rw_byteenable,
   input logic avm_memgmem0_DDR_port_1_0_rw_waitrequest,
   input logic [511:0] avm_memgmem0_DDR_port_1_0_rw_readdata,
   input logic avm_memgmem0_DDR_port_1_0_rw_readdatavalid,
   input logic avm_memgmem0_DDR_port_1_0_rw_writeack
);
   genvar __i;
   logic [1:0] kernel_irqs;
   logic [0:0] cc_snoop_ready_all;
   logic const_avm_0_enable [1];
   logic const_avm_0_read [1];
   logic const_avm_0_write [1];
   logic const_avm_0_burstcount [1];
   logic [32:0] const_avm_0_address [1];
   logic [511:0] const_avm_0_writedata [1];
   logic [63:0] const_avm_0_byteenable [1];
   logic const_avm_0_waitrequest [1];
   logic [511:0] const_avm_0_readdata [1];
   logic const_avm_0_readdatavalid [1];
   logic gmem0_DDR_global_avm_enable [10];
   logic gmem0_DDR_global_avm_read [10];
   logic gmem0_DDR_global_avm_write [10];
   logic [4:0] gmem0_DDR_global_avm_burstcount [10];
   logic [32:0] gmem0_DDR_global_avm_address [10];
   logic [511:0] gmem0_DDR_global_avm_writedata [10];
   logic [63:0] gmem0_DDR_global_avm_byteenable [10];
   logic gmem0_DDR_global_avm_waitrequest [10];
   logic [511:0] gmem0_DDR_global_avm_readdata [10];
   logic gmem0_DDR_global_avm_readdatavalid [10];
   logic gmem0_DDR_global_avm_writeack [10];

   // INST ethash_calculate_dag_item_inst of ethash_calculate_dag_item_partition_wrapper
   ethash_calculate_dag_item_partition_wrapper ethash_calculate_dag_item_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_ethash_calculate_dag_item(kernel_irqs[0]),
      // AVS avs_ethash_calculate_dag_item_cra
      .avs_ethash_calculate_dag_item_cra_enable(avs_ethash_calculate_dag_item_cra_enable),
      .avs_ethash_calculate_dag_item_cra_read(avs_ethash_calculate_dag_item_cra_read),
      .avs_ethash_calculate_dag_item_cra_write(avs_ethash_calculate_dag_item_cra_write),
      .avs_ethash_calculate_dag_item_cra_address(avs_ethash_calculate_dag_item_cra_address),
      .avs_ethash_calculate_dag_item_cra_writedata(avs_ethash_calculate_dag_item_cra_writedata),
      .avs_ethash_calculate_dag_item_cra_byteenable(avs_ethash_calculate_dag_item_cra_byteenable),
      .avs_ethash_calculate_dag_item_cra_readdata(avs_ethash_calculate_dag_item_cra_readdata),
      .avs_ethash_calculate_dag_item_cra_readdatavalid(avs_ethash_calculate_dag_item_cra_readdatavalid),
      // AVM ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_enable(gmem0_DDR_global_avm_enable[0]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_read(gmem0_DDR_global_avm_read[0]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_write(gmem0_DDR_global_avm_write[0]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_burstcount(gmem0_DDR_global_avm_burstcount[0]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_address(gmem0_DDR_global_avm_address[0]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_writedata(gmem0_DDR_global_avm_writedata[0]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_byteenable(gmem0_DDR_global_avm_byteenable[0]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_waitrequest(gmem0_DDR_global_avm_waitrequest[0]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_readdata(gmem0_DDR_global_avm_readdata[0]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_readdatavalid(gmem0_DDR_global_avm_readdatavalid[0]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_writeack(gmem0_DDR_global_avm_writeack[0]),
      // AVM ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_enable(gmem0_DDR_global_avm_enable[1]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_read(gmem0_DDR_global_avm_read[1]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_write(gmem0_DDR_global_avm_write[1]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_burstcount(gmem0_DDR_global_avm_burstcount[1]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_address(gmem0_DDR_global_avm_address[1]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_writedata(gmem0_DDR_global_avm_writedata[1]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_byteenable(gmem0_DDR_global_avm_byteenable[1]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_waitrequest(gmem0_DDR_global_avm_waitrequest[1]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_readdata(gmem0_DDR_global_avm_readdata[1]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_readdatavalid(gmem0_DDR_global_avm_readdatavalid[1]),
      .ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_writeack(gmem0_DDR_global_avm_writeack[1]),
      // AVM ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15
      .ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_enable(gmem0_DDR_global_avm_enable[2]),
      .ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_read(gmem0_DDR_global_avm_read[2]),
      .ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_write(gmem0_DDR_global_avm_write[2]),
      .ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_burstcount(gmem0_DDR_global_avm_burstcount[2]),
      .ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_address(gmem0_DDR_global_avm_address[2]),
      .ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_writedata(gmem0_DDR_global_avm_writedata[2]),
      .ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_byteenable(gmem0_DDR_global_avm_byteenable[2]),
      .ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_waitrequest(gmem0_DDR_global_avm_waitrequest[2]),
      .ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_readdata(gmem0_DDR_global_avm_readdata[2]),
      .ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_readdatavalid(gmem0_DDR_global_avm_readdatavalid[2]),
      .ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_writeack(gmem0_DDR_global_avm_writeack[2])
   );

   // INST ethash_search_inst of ethash_search_partition_wrapper
   ethash_search_partition_wrapper ethash_search_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_ethash_search(kernel_irqs[1]),
      // AVS avs_ethash_search_cra
      .avs_ethash_search_cra_enable(avs_ethash_search_cra_enable),
      .avs_ethash_search_cra_read(avs_ethash_search_cra_read),
      .avs_ethash_search_cra_write(avs_ethash_search_cra_write),
      .avs_ethash_search_cra_address(avs_ethash_search_cra_address),
      .avs_ethash_search_cra_writedata(avs_ethash_search_cra_writedata),
      .avs_ethash_search_cra_byteenable(avs_ethash_search_cra_byteenable),
      .avs_ethash_search_cra_readdata(avs_ethash_search_cra_readdata),
      .avs_ethash_search_cra_readdatavalid(avs_ethash_search_cra_readdatavalid),
      // AVM ethash_search_0_avm_memcoalesce_g_header_load_0
      .ethash_search_0_avm_memcoalesce_g_header_load_0_enable(const_avm_0_enable[0]),
      .ethash_search_0_avm_memcoalesce_g_header_load_0_read(const_avm_0_read[0]),
      .ethash_search_0_avm_memcoalesce_g_header_load_0_write(const_avm_0_write[0]),
      .ethash_search_0_avm_memcoalesce_g_header_load_0_burstcount(const_avm_0_burstcount[0]),
      .ethash_search_0_avm_memcoalesce_g_header_load_0_address(const_avm_0_address[0]),
      .ethash_search_0_avm_memcoalesce_g_header_load_0_writedata(const_avm_0_writedata[0]),
      .ethash_search_0_avm_memcoalesce_g_header_load_0_byteenable(const_avm_0_byteenable[0]),
      .ethash_search_0_avm_memcoalesce_g_header_load_0_waitrequest(const_avm_0_waitrequest[0]),
      .ethash_search_0_avm_memcoalesce_g_header_load_0_readdata(const_avm_0_readdata[0]),
      .ethash_search_0_avm_memcoalesce_g_header_load_0_readdatavalid(const_avm_0_readdatavalid[0]),
      // AVM ethash_search_0_avm_call152
      .ethash_search_0_avm_call152_enable(gmem0_DDR_global_avm_enable[3]),
      .ethash_search_0_avm_call152_read(gmem0_DDR_global_avm_read[3]),
      .ethash_search_0_avm_call152_write(gmem0_DDR_global_avm_write[3]),
      .ethash_search_0_avm_call152_burstcount(gmem0_DDR_global_avm_burstcount[3]),
      .ethash_search_0_avm_call152_address(gmem0_DDR_global_avm_address[3]),
      .ethash_search_0_avm_call152_writedata(gmem0_DDR_global_avm_writedata[3]),
      .ethash_search_0_avm_call152_byteenable(gmem0_DDR_global_avm_byteenable[3]),
      .ethash_search_0_avm_call152_waitrequest(gmem0_DDR_global_avm_waitrequest[3]),
      .ethash_search_0_avm_call152_readdata(gmem0_DDR_global_avm_readdata[3]),
      .ethash_search_0_avm_call152_readdatavalid(gmem0_DDR_global_avm_readdatavalid[3]),
      .ethash_search_0_avm_call152_writeack(gmem0_DDR_global_avm_writeack[3]),
      // AVM ethash_search_0_avm_unnamed_ethash_search35
      .ethash_search_0_avm_unnamed_ethash_search35_enable(gmem0_DDR_global_avm_enable[4]),
      .ethash_search_0_avm_unnamed_ethash_search35_read(gmem0_DDR_global_avm_read[4]),
      .ethash_search_0_avm_unnamed_ethash_search35_write(gmem0_DDR_global_avm_write[4]),
      .ethash_search_0_avm_unnamed_ethash_search35_burstcount(gmem0_DDR_global_avm_burstcount[4]),
      .ethash_search_0_avm_unnamed_ethash_search35_address(gmem0_DDR_global_avm_address[4]),
      .ethash_search_0_avm_unnamed_ethash_search35_writedata(gmem0_DDR_global_avm_writedata[4]),
      .ethash_search_0_avm_unnamed_ethash_search35_byteenable(gmem0_DDR_global_avm_byteenable[4]),
      .ethash_search_0_avm_unnamed_ethash_search35_waitrequest(gmem0_DDR_global_avm_waitrequest[4]),
      .ethash_search_0_avm_unnamed_ethash_search35_readdata(gmem0_DDR_global_avm_readdata[4]),
      .ethash_search_0_avm_unnamed_ethash_search35_readdatavalid(gmem0_DDR_global_avm_readdatavalid[4]),
      .ethash_search_0_avm_unnamed_ethash_search35_writeack(gmem0_DDR_global_avm_writeack[4]),
      // AVM ethash_search_0_avm_unnamed_ethash_search61
      .ethash_search_0_avm_unnamed_ethash_search61_enable(gmem0_DDR_global_avm_enable[5]),
      .ethash_search_0_avm_unnamed_ethash_search61_read(gmem0_DDR_global_avm_read[5]),
      .ethash_search_0_avm_unnamed_ethash_search61_write(gmem0_DDR_global_avm_write[5]),
      .ethash_search_0_avm_unnamed_ethash_search61_burstcount(gmem0_DDR_global_avm_burstcount[5]),
      .ethash_search_0_avm_unnamed_ethash_search61_address(gmem0_DDR_global_avm_address[5]),
      .ethash_search_0_avm_unnamed_ethash_search61_writedata(gmem0_DDR_global_avm_writedata[5]),
      .ethash_search_0_avm_unnamed_ethash_search61_byteenable(gmem0_DDR_global_avm_byteenable[5]),
      .ethash_search_0_avm_unnamed_ethash_search61_waitrequest(gmem0_DDR_global_avm_waitrequest[5]),
      .ethash_search_0_avm_unnamed_ethash_search61_readdata(gmem0_DDR_global_avm_readdata[5]),
      .ethash_search_0_avm_unnamed_ethash_search61_readdatavalid(gmem0_DDR_global_avm_readdatavalid[5]),
      .ethash_search_0_avm_unnamed_ethash_search61_writeack(gmem0_DDR_global_avm_writeack[5]),
      // AVM ethash_search_0_avm_unnamed_ethash_search62
      .ethash_search_0_avm_unnamed_ethash_search62_enable(gmem0_DDR_global_avm_enable[6]),
      .ethash_search_0_avm_unnamed_ethash_search62_read(gmem0_DDR_global_avm_read[6]),
      .ethash_search_0_avm_unnamed_ethash_search62_write(gmem0_DDR_global_avm_write[6]),
      .ethash_search_0_avm_unnamed_ethash_search62_burstcount(gmem0_DDR_global_avm_burstcount[6]),
      .ethash_search_0_avm_unnamed_ethash_search62_address(gmem0_DDR_global_avm_address[6]),
      .ethash_search_0_avm_unnamed_ethash_search62_writedata(gmem0_DDR_global_avm_writedata[6]),
      .ethash_search_0_avm_unnamed_ethash_search62_byteenable(gmem0_DDR_global_avm_byteenable[6]),
      .ethash_search_0_avm_unnamed_ethash_search62_waitrequest(gmem0_DDR_global_avm_waitrequest[6]),
      .ethash_search_0_avm_unnamed_ethash_search62_readdata(gmem0_DDR_global_avm_readdata[6]),
      .ethash_search_0_avm_unnamed_ethash_search62_readdatavalid(gmem0_DDR_global_avm_readdatavalid[6]),
      .ethash_search_0_avm_unnamed_ethash_search62_writeack(gmem0_DDR_global_avm_writeack[6]),
      // AVM ethash_search_0_avm_unnamed_ethash_search63
      .ethash_search_0_avm_unnamed_ethash_search63_enable(gmem0_DDR_global_avm_enable[7]),
      .ethash_search_0_avm_unnamed_ethash_search63_read(gmem0_DDR_global_avm_read[7]),
      .ethash_search_0_avm_unnamed_ethash_search63_write(gmem0_DDR_global_avm_write[7]),
      .ethash_search_0_avm_unnamed_ethash_search63_burstcount(gmem0_DDR_global_avm_burstcount[7]),
      .ethash_search_0_avm_unnamed_ethash_search63_address(gmem0_DDR_global_avm_address[7]),
      .ethash_search_0_avm_unnamed_ethash_search63_writedata(gmem0_DDR_global_avm_writedata[7]),
      .ethash_search_0_avm_unnamed_ethash_search63_byteenable(gmem0_DDR_global_avm_byteenable[7]),
      .ethash_search_0_avm_unnamed_ethash_search63_waitrequest(gmem0_DDR_global_avm_waitrequest[7]),
      .ethash_search_0_avm_unnamed_ethash_search63_readdata(gmem0_DDR_global_avm_readdata[7]),
      .ethash_search_0_avm_unnamed_ethash_search63_readdatavalid(gmem0_DDR_global_avm_readdatavalid[7]),
      .ethash_search_0_avm_unnamed_ethash_search63_writeack(gmem0_DDR_global_avm_writeack[7]),
      // AVM ethash_search_0_avm_unnamed_ethash_search64
      .ethash_search_0_avm_unnamed_ethash_search64_enable(gmem0_DDR_global_avm_enable[8]),
      .ethash_search_0_avm_unnamed_ethash_search64_read(gmem0_DDR_global_avm_read[8]),
      .ethash_search_0_avm_unnamed_ethash_search64_write(gmem0_DDR_global_avm_write[8]),
      .ethash_search_0_avm_unnamed_ethash_search64_burstcount(gmem0_DDR_global_avm_burstcount[8]),
      .ethash_search_0_avm_unnamed_ethash_search64_address(gmem0_DDR_global_avm_address[8]),
      .ethash_search_0_avm_unnamed_ethash_search64_writedata(gmem0_DDR_global_avm_writedata[8]),
      .ethash_search_0_avm_unnamed_ethash_search64_byteenable(gmem0_DDR_global_avm_byteenable[8]),
      .ethash_search_0_avm_unnamed_ethash_search64_waitrequest(gmem0_DDR_global_avm_waitrequest[8]),
      .ethash_search_0_avm_unnamed_ethash_search64_readdata(gmem0_DDR_global_avm_readdata[8]),
      .ethash_search_0_avm_unnamed_ethash_search64_readdatavalid(gmem0_DDR_global_avm_readdatavalid[8]),
      .ethash_search_0_avm_unnamed_ethash_search64_writeack(gmem0_DDR_global_avm_writeack[8])
   );

   assign kernel_irq = |kernel_irqs;
   assign cc_snoop_ready = &cc_snoop_ready_all;
   generate
   begin:const_mem_0
      logic snoop_overflow;
      logic [26:0] snoop_addr;
      logic [4:0] snoop_burst;
      logic snoop_ready;
      logic [26:0] cc_addr;
      logic cc_read;
      logic cc_waitrequest;
      logic cc_readdatavalid;
      logic [511:0] cc_readdata;
      logic avm_fill_enable;
      logic avm_fill_read;
      logic avm_fill_write;
      logic [4:0] avm_fill_burstcount;
      logic [32:0] avm_fill_address;
      logic [511:0] avm_fill_writedata;
      logic [63:0] avm_fill_byteenable;
      logic avm_fill_waitrequest;
      logic [511:0] avm_fill_readdata;
      logic avm_fill_readdatavalid;
      logic avm_fill_writeack;
      logic [26:0] avm_fill_address_word;

      // INST const_cache of acl_const_cache
      acl_const_cache
      #(
         .NUMPORTS(1),
         .LOG2SIZE(14),
         .LOG2WIDTH(9),
         .AWIDTH(27),
         .MWIDTH(512),
         .BURSTWIDTH(5),
         .FAMILY("Arria 10")
      )
      const_cache
      (
         .clk(clock),
         .clk2x(clock2x),
         .resetn(resetn),
         .fill_addr(avm_fill_address_word),
         .fill_read(avm_fill_read),
         .fill_waitrequest(avm_fill_waitrequest),
         .fill_readdatavalid(avm_fill_readdatavalid),
         .fill_readdata(avm_fill_readdata),
         .flush_cache(),
         .snoop_clk(cc_snoop_clk),
         .snoop_overflow(snoop_overflow),
         .snoop_addr(snoop_addr),
         .snoop_burst(snoop_burst),
         .snoop_write(cc_snoop_valid),
         .snoop_ready(snoop_ready),
         .rdport_addr(cc_addr),
         .rdport_read(cc_read),
         .rdport_waitrequest(cc_waitrequest),
         .rdport_readdatavalid(cc_readdatavalid),
         .rdport_readdata(cc_readdata)
      );

      assign snoop_overflow = cc_snoop_data[32];
      assign snoop_addr = cc_snoop_data[31:5];
      assign snoop_burst = cc_snoop_data[4:0];
      assign cc_snoop_ready_all[0] = snoop_ready;
      assign cc_addr = {const_avm_0_address[0][32:6]};
      assign cc_read = {const_avm_0_read[0]};
      assign {const_avm_0_waitrequest[0]} = cc_waitrequest;
      assign {const_avm_0_readdatavalid[0]} = cc_readdatavalid;
      assign {const_avm_0_readdata[0]} = cc_readdata;
      assign avm_fill_address = avm_fill_address_word << 6;
      assign avm_fill_write = 1'b0;
      assign avm_fill_byteenable = '1;
      assign avm_fill_burstcount = 5'b00001;
      assign avm_fill_enable = 1'b1;
   end
   endgenerate

   generate
   begin:gmem0_DDR_
      logic gmem0_DDR_icm_in_arb_request [10];
      logic gmem0_DDR_icm_in_arb_enable [10];
      logic gmem0_DDR_icm_in_arb_read [10];
      logic gmem0_DDR_icm_in_arb_write [10];
      logic [4:0] gmem0_DDR_icm_in_arb_burstcount [10];
      logic [26:0] gmem0_DDR_icm_in_arb_address [10];
      logic [511:0] gmem0_DDR_icm_in_arb_writedata [10];
      logic [63:0] gmem0_DDR_icm_in_arb_byteenable [10];
      logic gmem0_DDR_icm_in_arb_stall [10];
      logic gmem0_DDR_icm_in_wrp_ack [10];
      logic gmem0_DDR_icm_in_rrp_datavalid [10];
      logic [511:0] gmem0_DDR_icm_in_rrp_data [10];
      logic gmem0_DDR_icm_preroute_arb_request [4];
      logic gmem0_DDR_icm_preroute_arb_enable [4];
      logic gmem0_DDR_icm_preroute_arb_read [4];
      logic gmem0_DDR_icm_preroute_arb_write [4];
      logic [4:0] gmem0_DDR_icm_preroute_arb_burstcount [4];
      logic [26:0] gmem0_DDR_icm_preroute_arb_address [4];
      logic [511:0] gmem0_DDR_icm_preroute_arb_writedata [4];
      logic [63:0] gmem0_DDR_icm_preroute_arb_byteenable [4];
      logic gmem0_DDR_icm_preroute_arb_stall [4];
      logic gmem0_DDR_icm_preroute_wrp_ack [4];
      logic gmem0_DDR_icm_preroute_rrp_datavalid [4];
      logic [511:0] gmem0_DDR_icm_preroute_rrp_data [4];
      logic icm_groupgmem0_DDR_router_0_arb_request [3];
      logic icm_groupgmem0_DDR_router_0_arb_enable [3];
      logic icm_groupgmem0_DDR_router_0_arb_read [3];
      logic icm_groupgmem0_DDR_router_0_arb_write [3];
      logic [4:0] icm_groupgmem0_DDR_router_0_arb_burstcount [3];
      logic [26:0] icm_groupgmem0_DDR_router_0_arb_address [3];
      logic [511:0] icm_groupgmem0_DDR_router_0_arb_writedata [3];
      logic [63:0] icm_groupgmem0_DDR_router_0_arb_byteenable [3];
      logic icm_groupgmem0_DDR_router_0_arb_stall [3];
      logic icm_groupgmem0_DDR_router_0_wrp_ack [3];
      logic icm_groupgmem0_DDR_router_0_rrp_datavalid [3];
      logic [511:0] icm_groupgmem0_DDR_router_0_rrp_data [3];
      logic icm_groupgmem0_DDR_router_1_arb_request [3];
      logic icm_groupgmem0_DDR_router_1_arb_enable [3];
      logic icm_groupgmem0_DDR_router_1_arb_read [3];
      logic icm_groupgmem0_DDR_router_1_arb_write [3];
      logic [4:0] icm_groupgmem0_DDR_router_1_arb_burstcount [3];
      logic [26:0] icm_groupgmem0_DDR_router_1_arb_address [3];
      logic [511:0] icm_groupgmem0_DDR_router_1_arb_writedata [3];
      logic [63:0] icm_groupgmem0_DDR_router_1_arb_byteenable [3];
      logic icm_groupgmem0_DDR_router_1_arb_stall [3];
      logic icm_groupgmem0_DDR_router_1_wrp_ack [3];
      logic icm_groupgmem0_DDR_router_1_rrp_datavalid [3];
      logic [511:0] icm_groupgmem0_DDR_router_1_rrp_data [3];
      logic icm_groupgmem0_DDR_router_2_arb_request [2];
      logic icm_groupgmem0_DDR_router_2_arb_enable [2];
      logic icm_groupgmem0_DDR_router_2_arb_read [2];
      logic icm_groupgmem0_DDR_router_2_arb_write [2];
      logic [4:0] icm_groupgmem0_DDR_router_2_arb_burstcount [2];
      logic [26:0] icm_groupgmem0_DDR_router_2_arb_address [2];
      logic [511:0] icm_groupgmem0_DDR_router_2_arb_writedata [2];
      logic [63:0] icm_groupgmem0_DDR_router_2_arb_byteenable [2];
      logic icm_groupgmem0_DDR_router_2_arb_stall [2];
      logic icm_groupgmem0_DDR_router_2_wrp_ack [2];
      logic icm_groupgmem0_DDR_router_2_rrp_datavalid [2];
      logic [511:0] icm_groupgmem0_DDR_router_2_rrp_data [2];
      logic icm_groupgmem0_DDR_router_3_arb_request [2];
      logic icm_groupgmem0_DDR_router_3_arb_enable [2];
      logic icm_groupgmem0_DDR_router_3_arb_read [2];
      logic icm_groupgmem0_DDR_router_3_arb_write [2];
      logic [4:0] icm_groupgmem0_DDR_router_3_arb_burstcount [2];
      logic [26:0] icm_groupgmem0_DDR_router_3_arb_address [2];
      logic [511:0] icm_groupgmem0_DDR_router_3_arb_writedata [2];
      logic [63:0] icm_groupgmem0_DDR_router_3_arb_byteenable [2];
      logic icm_groupgmem0_DDR_router_3_arb_stall [2];
      logic icm_groupgmem0_DDR_router_3_wrp_ack [2];
      logic icm_groupgmem0_DDR_router_3_rrp_datavalid [2];
      logic [511:0] icm_groupgmem0_DDR_router_3_rrp_data [2];
      logic icm_out_0_rw_arb_request [2];
      logic icm_out_0_rw_arb_enable [2];
      logic icm_out_0_rw_arb_read [2];
      logic icm_out_0_rw_arb_write [2];
      logic [4:0] icm_out_0_rw_arb_burstcount [2];
      logic [25:0] icm_out_0_rw_arb_address [2];
      logic [511:0] icm_out_0_rw_arb_writedata [2];
      logic [63:0] icm_out_0_rw_arb_byteenable [2];
      logic [1:0] icm_out_0_rw_arb_id [2];
      logic icm_out_0_rw_arb_stall [2];
      logic icm_out_0_rw_wrp_ack [2];
      logic icm_out_0_rw_rrp_datavalid [2];
      logic [511:0] icm_out_0_rw_rrp_data [2];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_request [4];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_enable [4];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_read [4];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_write [4];
      logic [4:0] icm_routedgmem0_DDR_port_0_0_rw_arb_burstcount [4];
      logic [25:0] icm_routedgmem0_DDR_port_0_0_rw_arb_address [4];
      logic [511:0] icm_routedgmem0_DDR_port_0_0_rw_arb_writedata [4];
      logic [63:0] icm_routedgmem0_DDR_port_0_0_rw_arb_byteenable [4];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_stall [4];
      logic icm_routedgmem0_DDR_port_0_0_rw_wrp_ack [4];
      logic icm_routedgmem0_DDR_port_0_0_rw_rrp_datavalid [4];
      logic [511:0] icm_routedgmem0_DDR_port_0_0_rw_rrp_data [4];
      logic avm_mem_atomics_ingmem0_DDR_port_0_0_rw_enable;
      logic avm_mem_atomics_ingmem0_DDR_port_0_0_rw_read;
      logic avm_mem_atomics_ingmem0_DDR_port_0_0_rw_write;
      logic [4:0] avm_mem_atomics_ingmem0_DDR_port_0_0_rw_burstcount;
      logic [31:0] avm_mem_atomics_ingmem0_DDR_port_0_0_rw_address;
      logic [511:0] avm_mem_atomics_ingmem0_DDR_port_0_0_rw_writedata;
      logic [63:0] avm_mem_atomics_ingmem0_DDR_port_0_0_rw_byteenable;
      logic avm_mem_atomics_ingmem0_DDR_port_0_0_rw_waitrequest;
      logic [511:0] avm_mem_atomics_ingmem0_DDR_port_0_0_rw_readdata;
      logic avm_mem_atomics_ingmem0_DDR_port_0_0_rw_readdatavalid;
      logic avm_mem_atomics_ingmem0_DDR_port_0_0_rw_writeack;
      logic icm_routedgmem0_DDR_port_1_0_rw_arb_request [4];
      logic icm_routedgmem0_DDR_port_1_0_rw_arb_enable [4];
      logic icm_routedgmem0_DDR_port_1_0_rw_arb_read [4];
      logic icm_routedgmem0_DDR_port_1_0_rw_arb_write [4];
      logic [4:0] icm_routedgmem0_DDR_port_1_0_rw_arb_burstcount [4];
      logic [25:0] icm_routedgmem0_DDR_port_1_0_rw_arb_address [4];
      logic [511:0] icm_routedgmem0_DDR_port_1_0_rw_arb_writedata [4];
      logic [63:0] icm_routedgmem0_DDR_port_1_0_rw_arb_byteenable [4];
      logic icm_routedgmem0_DDR_port_1_0_rw_arb_stall [4];
      logic icm_routedgmem0_DDR_port_1_0_rw_wrp_ack [4];
      logic icm_routedgmem0_DDR_port_1_0_rw_rrp_datavalid [4];
      logic [511:0] icm_routedgmem0_DDR_port_1_0_rw_rrp_data [4];
      logic avm_mem_atomics_ingmem0_DDR_port_1_0_rw_enable;
      logic avm_mem_atomics_ingmem0_DDR_port_1_0_rw_read;
      logic avm_mem_atomics_ingmem0_DDR_port_1_0_rw_write;
      logic [4:0] avm_mem_atomics_ingmem0_DDR_port_1_0_rw_burstcount;
      logic [31:0] avm_mem_atomics_ingmem0_DDR_port_1_0_rw_address;
      logic [511:0] avm_mem_atomics_ingmem0_DDR_port_1_0_rw_writedata;
      logic [63:0] avm_mem_atomics_ingmem0_DDR_port_1_0_rw_byteenable;
      logic avm_mem_atomics_ingmem0_DDR_port_1_0_rw_waitrequest;
      logic [511:0] avm_mem_atomics_ingmem0_DDR_port_1_0_rw_readdata;
      logic avm_mem_atomics_ingmem0_DDR_port_1_0_rw_readdatavalid;
      logic avm_mem_atomics_ingmem0_DDR_port_1_0_rw_writeack;

      for( __i = 0; __i < 10; __i = __i + 1 )
      begin:t
         // INST gmem0_DDR_avm_to_ic of acl_avm_to_ic
         acl_avm_to_ic
         #(
            .DATA_W(512),
            .WRITEDATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(33),
            .BYTEENA_W(64)
         )
         gmem0_DDR_avm_to_ic
         (
            // AVM avm
            .avm_enable(gmem0_DDR_global_avm_enable[__i]),
            .avm_read(gmem0_DDR_global_avm_read[__i]),
            .avm_write(gmem0_DDR_global_avm_write[__i]),
            .avm_burstcount(gmem0_DDR_global_avm_burstcount[__i]),
            .avm_address(gmem0_DDR_global_avm_address[__i]),
            .avm_writedata(gmem0_DDR_global_avm_writedata[__i]),
            .avm_byteenable(gmem0_DDR_global_avm_byteenable[__i]),
            .avm_waitrequest(gmem0_DDR_global_avm_waitrequest[__i]),
            .avm_readdata(gmem0_DDR_global_avm_readdata[__i]),
            .avm_readdatavalid(gmem0_DDR_global_avm_readdatavalid[__i]),
            .avm_writeack(gmem0_DDR_global_avm_writeack[__i]),
            // ICM ic
            .ic_arb_request(gmem0_DDR_icm_in_arb_request[__i]),
            .ic_arb_enable(gmem0_DDR_icm_in_arb_enable[__i]),
            .ic_arb_read(gmem0_DDR_icm_in_arb_read[__i]),
            .ic_arb_write(gmem0_DDR_icm_in_arb_write[__i]),
            .ic_arb_burstcount(gmem0_DDR_icm_in_arb_burstcount[__i]),
            .ic_arb_address(gmem0_DDR_icm_in_arb_address[__i]),
            .ic_arb_writedata(gmem0_DDR_icm_in_arb_writedata[__i]),
            .ic_arb_byteenable(gmem0_DDR_icm_in_arb_byteenable[__i]),
            .ic_arb_stall(gmem0_DDR_icm_in_arb_stall[__i]),
            .ic_wrp_ack(gmem0_DDR_icm_in_wrp_ack[__i]),
            .ic_rrp_datavalid(gmem0_DDR_icm_in_rrp_datavalid[__i]),
            .ic_rrp_data(gmem0_DDR_icm_in_rrp_data[__i])
         );

      end

      assign icm_groupgmem0_DDR_router_0_arb_request[0] = gmem0_DDR_icm_in_arb_request[9];
      assign icm_groupgmem0_DDR_router_0_arb_enable[0] = gmem0_DDR_icm_in_arb_enable[9];
      assign icm_groupgmem0_DDR_router_0_arb_read[0] = gmem0_DDR_icm_in_arb_read[9];
      assign icm_groupgmem0_DDR_router_0_arb_write[0] = gmem0_DDR_icm_in_arb_write[9];
      assign icm_groupgmem0_DDR_router_0_arb_burstcount[0] = gmem0_DDR_icm_in_arb_burstcount[9];
      assign icm_groupgmem0_DDR_router_0_arb_address[0] = gmem0_DDR_icm_in_arb_address[9];
      assign icm_groupgmem0_DDR_router_0_arb_writedata[0] = gmem0_DDR_icm_in_arb_writedata[9];
      assign icm_groupgmem0_DDR_router_0_arb_byteenable[0] = gmem0_DDR_icm_in_arb_byteenable[9];
      assign gmem0_DDR_icm_in_arb_stall[9] = icm_groupgmem0_DDR_router_0_arb_stall[0];
      assign gmem0_DDR_icm_in_wrp_ack[9] = icm_groupgmem0_DDR_router_0_wrp_ack[0];
      assign gmem0_DDR_icm_in_rrp_datavalid[9] = icm_groupgmem0_DDR_router_0_rrp_datavalid[0];
      assign gmem0_DDR_icm_in_rrp_data[9] = icm_groupgmem0_DDR_router_0_rrp_data[0];
      assign icm_groupgmem0_DDR_router_0_arb_request[1] = gmem0_DDR_icm_in_arb_request[0];
      assign icm_groupgmem0_DDR_router_0_arb_enable[1] = gmem0_DDR_icm_in_arb_enable[0];
      assign icm_groupgmem0_DDR_router_0_arb_read[1] = gmem0_DDR_icm_in_arb_read[0];
      assign icm_groupgmem0_DDR_router_0_arb_write[1] = gmem0_DDR_icm_in_arb_write[0];
      assign icm_groupgmem0_DDR_router_0_arb_burstcount[1] = gmem0_DDR_icm_in_arb_burstcount[0];
      assign icm_groupgmem0_DDR_router_0_arb_address[1] = gmem0_DDR_icm_in_arb_address[0];
      assign icm_groupgmem0_DDR_router_0_arb_writedata[1] = gmem0_DDR_icm_in_arb_writedata[0];
      assign icm_groupgmem0_DDR_router_0_arb_byteenable[1] = gmem0_DDR_icm_in_arb_byteenable[0];
      assign gmem0_DDR_icm_in_arb_stall[0] = icm_groupgmem0_DDR_router_0_arb_stall[1];
      assign gmem0_DDR_icm_in_wrp_ack[0] = icm_groupgmem0_DDR_router_0_wrp_ack[1];
      assign gmem0_DDR_icm_in_rrp_datavalid[0] = icm_groupgmem0_DDR_router_0_rrp_datavalid[1];
      assign gmem0_DDR_icm_in_rrp_data[0] = icm_groupgmem0_DDR_router_0_rrp_data[1];
      assign icm_groupgmem0_DDR_router_0_arb_request[2] = gmem0_DDR_icm_in_arb_request[7];
      assign icm_groupgmem0_DDR_router_0_arb_enable[2] = gmem0_DDR_icm_in_arb_enable[7];
      assign icm_groupgmem0_DDR_router_0_arb_read[2] = gmem0_DDR_icm_in_arb_read[7];
      assign icm_groupgmem0_DDR_router_0_arb_write[2] = gmem0_DDR_icm_in_arb_write[7];
      assign icm_groupgmem0_DDR_router_0_arb_burstcount[2] = gmem0_DDR_icm_in_arb_burstcount[7];
      assign icm_groupgmem0_DDR_router_0_arb_address[2] = gmem0_DDR_icm_in_arb_address[7];
      assign icm_groupgmem0_DDR_router_0_arb_writedata[2] = gmem0_DDR_icm_in_arb_writedata[7];
      assign icm_groupgmem0_DDR_router_0_arb_byteenable[2] = gmem0_DDR_icm_in_arb_byteenable[7];
      assign gmem0_DDR_icm_in_arb_stall[7] = icm_groupgmem0_DDR_router_0_arb_stall[2];
      assign gmem0_DDR_icm_in_wrp_ack[7] = icm_groupgmem0_DDR_router_0_wrp_ack[2];
      assign gmem0_DDR_icm_in_rrp_datavalid[7] = icm_groupgmem0_DDR_router_0_rrp_datavalid[2];
      assign gmem0_DDR_icm_in_rrp_data[7] = icm_groupgmem0_DDR_router_0_rrp_data[2];
      // INST global_ic_preroutegmem0_DDR_router_0 of CLMiner_kernel_stable_system_interconnect_0
      CLMiner_kernel_stable_system_interconnect_0 global_ic_preroutegmem0_DDR_router_0
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_groupgmem0_DDR_router_0_arb_request),
         .m_arb_enable(icm_groupgmem0_DDR_router_0_arb_enable),
         .m_arb_read(icm_groupgmem0_DDR_router_0_arb_read),
         .m_arb_write(icm_groupgmem0_DDR_router_0_arb_write),
         .m_arb_burstcount(icm_groupgmem0_DDR_router_0_arb_burstcount),
         .m_arb_address(icm_groupgmem0_DDR_router_0_arb_address),
         .m_arb_writedata(icm_groupgmem0_DDR_router_0_arb_writedata),
         .m_arb_byteenable(icm_groupgmem0_DDR_router_0_arb_byteenable),
         .m_arb_stall(icm_groupgmem0_DDR_router_0_arb_stall),
         .m_wrp_ack(icm_groupgmem0_DDR_router_0_wrp_ack),
         .m_rrp_datavalid(icm_groupgmem0_DDR_router_0_rrp_datavalid),
         .m_rrp_data(icm_groupgmem0_DDR_router_0_rrp_data),
         // ICM mout
         .mout_arb_request(gmem0_DDR_icm_preroute_arb_request[0]),
         .mout_arb_enable(gmem0_DDR_icm_preroute_arb_enable[0]),
         .mout_arb_read(gmem0_DDR_icm_preroute_arb_read[0]),
         .mout_arb_write(gmem0_DDR_icm_preroute_arb_write[0]),
         .mout_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[0]),
         .mout_arb_address(gmem0_DDR_icm_preroute_arb_address[0]),
         .mout_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[0]),
         .mout_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[0]),
         .mout_arb_id(),
         .mout_arb_stall(gmem0_DDR_icm_preroute_arb_stall[0]),
         .mout_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[0]),
         .mout_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[0]),
         .mout_rrp_data(gmem0_DDR_icm_preroute_rrp_data[0])
      );

      assign icm_groupgmem0_DDR_router_1_arb_request[0] = gmem0_DDR_icm_in_arb_request[4];
      assign icm_groupgmem0_DDR_router_1_arb_enable[0] = gmem0_DDR_icm_in_arb_enable[4];
      assign icm_groupgmem0_DDR_router_1_arb_read[0] = gmem0_DDR_icm_in_arb_read[4];
      assign icm_groupgmem0_DDR_router_1_arb_write[0] = gmem0_DDR_icm_in_arb_write[4];
      assign icm_groupgmem0_DDR_router_1_arb_burstcount[0] = gmem0_DDR_icm_in_arb_burstcount[4];
      assign icm_groupgmem0_DDR_router_1_arb_address[0] = gmem0_DDR_icm_in_arb_address[4];
      assign icm_groupgmem0_DDR_router_1_arb_writedata[0] = gmem0_DDR_icm_in_arb_writedata[4];
      assign icm_groupgmem0_DDR_router_1_arb_byteenable[0] = gmem0_DDR_icm_in_arb_byteenable[4];
      assign gmem0_DDR_icm_in_arb_stall[4] = icm_groupgmem0_DDR_router_1_arb_stall[0];
      assign gmem0_DDR_icm_in_wrp_ack[4] = icm_groupgmem0_DDR_router_1_wrp_ack[0];
      assign gmem0_DDR_icm_in_rrp_datavalid[4] = icm_groupgmem0_DDR_router_1_rrp_datavalid[0];
      assign gmem0_DDR_icm_in_rrp_data[4] = icm_groupgmem0_DDR_router_1_rrp_data[0];
      assign icm_groupgmem0_DDR_router_1_arb_request[1] = gmem0_DDR_icm_in_arb_request[2];
      assign icm_groupgmem0_DDR_router_1_arb_enable[1] = gmem0_DDR_icm_in_arb_enable[2];
      assign icm_groupgmem0_DDR_router_1_arb_read[1] = gmem0_DDR_icm_in_arb_read[2];
      assign icm_groupgmem0_DDR_router_1_arb_write[1] = gmem0_DDR_icm_in_arb_write[2];
      assign icm_groupgmem0_DDR_router_1_arb_burstcount[1] = gmem0_DDR_icm_in_arb_burstcount[2];
      assign icm_groupgmem0_DDR_router_1_arb_address[1] = gmem0_DDR_icm_in_arb_address[2];
      assign icm_groupgmem0_DDR_router_1_arb_writedata[1] = gmem0_DDR_icm_in_arb_writedata[2];
      assign icm_groupgmem0_DDR_router_1_arb_byteenable[1] = gmem0_DDR_icm_in_arb_byteenable[2];
      assign gmem0_DDR_icm_in_arb_stall[2] = icm_groupgmem0_DDR_router_1_arb_stall[1];
      assign gmem0_DDR_icm_in_wrp_ack[2] = icm_groupgmem0_DDR_router_1_wrp_ack[1];
      assign gmem0_DDR_icm_in_rrp_datavalid[2] = icm_groupgmem0_DDR_router_1_rrp_datavalid[1];
      assign gmem0_DDR_icm_in_rrp_data[2] = icm_groupgmem0_DDR_router_1_rrp_data[1];
      assign icm_groupgmem0_DDR_router_1_arb_request[2] = gmem0_DDR_icm_in_arb_request[6];
      assign icm_groupgmem0_DDR_router_1_arb_enable[2] = gmem0_DDR_icm_in_arb_enable[6];
      assign icm_groupgmem0_DDR_router_1_arb_read[2] = gmem0_DDR_icm_in_arb_read[6];
      assign icm_groupgmem0_DDR_router_1_arb_write[2] = gmem0_DDR_icm_in_arb_write[6];
      assign icm_groupgmem0_DDR_router_1_arb_burstcount[2] = gmem0_DDR_icm_in_arb_burstcount[6];
      assign icm_groupgmem0_DDR_router_1_arb_address[2] = gmem0_DDR_icm_in_arb_address[6];
      assign icm_groupgmem0_DDR_router_1_arb_writedata[2] = gmem0_DDR_icm_in_arb_writedata[6];
      assign icm_groupgmem0_DDR_router_1_arb_byteenable[2] = gmem0_DDR_icm_in_arb_byteenable[6];
      assign gmem0_DDR_icm_in_arb_stall[6] = icm_groupgmem0_DDR_router_1_arb_stall[2];
      assign gmem0_DDR_icm_in_wrp_ack[6] = icm_groupgmem0_DDR_router_1_wrp_ack[2];
      assign gmem0_DDR_icm_in_rrp_datavalid[6] = icm_groupgmem0_DDR_router_1_rrp_datavalid[2];
      assign gmem0_DDR_icm_in_rrp_data[6] = icm_groupgmem0_DDR_router_1_rrp_data[2];
      // INST global_ic_preroutegmem0_DDR_router_1 of CLMiner_kernel_stable_system_interconnect_1
      CLMiner_kernel_stable_system_interconnect_1 global_ic_preroutegmem0_DDR_router_1
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_groupgmem0_DDR_router_1_arb_request),
         .m_arb_enable(icm_groupgmem0_DDR_router_1_arb_enable),
         .m_arb_read(icm_groupgmem0_DDR_router_1_arb_read),
         .m_arb_write(icm_groupgmem0_DDR_router_1_arb_write),
         .m_arb_burstcount(icm_groupgmem0_DDR_router_1_arb_burstcount),
         .m_arb_address(icm_groupgmem0_DDR_router_1_arb_address),
         .m_arb_writedata(icm_groupgmem0_DDR_router_1_arb_writedata),
         .m_arb_byteenable(icm_groupgmem0_DDR_router_1_arb_byteenable),
         .m_arb_stall(icm_groupgmem0_DDR_router_1_arb_stall),
         .m_wrp_ack(icm_groupgmem0_DDR_router_1_wrp_ack),
         .m_rrp_datavalid(icm_groupgmem0_DDR_router_1_rrp_datavalid),
         .m_rrp_data(icm_groupgmem0_DDR_router_1_rrp_data),
         // ICM mout
         .mout_arb_request(gmem0_DDR_icm_preroute_arb_request[1]),
         .mout_arb_enable(gmem0_DDR_icm_preroute_arb_enable[1]),
         .mout_arb_read(gmem0_DDR_icm_preroute_arb_read[1]),
         .mout_arb_write(gmem0_DDR_icm_preroute_arb_write[1]),
         .mout_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[1]),
         .mout_arb_address(gmem0_DDR_icm_preroute_arb_address[1]),
         .mout_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[1]),
         .mout_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[1]),
         .mout_arb_id(),
         .mout_arb_stall(gmem0_DDR_icm_preroute_arb_stall[1]),
         .mout_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[1]),
         .mout_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[1]),
         .mout_rrp_data(gmem0_DDR_icm_preroute_rrp_data[1])
      );

      assign icm_groupgmem0_DDR_router_2_arb_request[0] = gmem0_DDR_icm_in_arb_request[1];
      assign icm_groupgmem0_DDR_router_2_arb_enable[0] = gmem0_DDR_icm_in_arb_enable[1];
      assign icm_groupgmem0_DDR_router_2_arb_read[0] = gmem0_DDR_icm_in_arb_read[1];
      assign icm_groupgmem0_DDR_router_2_arb_write[0] = gmem0_DDR_icm_in_arb_write[1];
      assign icm_groupgmem0_DDR_router_2_arb_burstcount[0] = gmem0_DDR_icm_in_arb_burstcount[1];
      assign icm_groupgmem0_DDR_router_2_arb_address[0] = gmem0_DDR_icm_in_arb_address[1];
      assign icm_groupgmem0_DDR_router_2_arb_writedata[0] = gmem0_DDR_icm_in_arb_writedata[1];
      assign icm_groupgmem0_DDR_router_2_arb_byteenable[0] = gmem0_DDR_icm_in_arb_byteenable[1];
      assign gmem0_DDR_icm_in_arb_stall[1] = icm_groupgmem0_DDR_router_2_arb_stall[0];
      assign gmem0_DDR_icm_in_wrp_ack[1] = icm_groupgmem0_DDR_router_2_wrp_ack[0];
      assign gmem0_DDR_icm_in_rrp_datavalid[1] = icm_groupgmem0_DDR_router_2_rrp_datavalid[0];
      assign gmem0_DDR_icm_in_rrp_data[1] = icm_groupgmem0_DDR_router_2_rrp_data[0];
      assign icm_groupgmem0_DDR_router_2_arb_request[1] = gmem0_DDR_icm_in_arb_request[3];
      assign icm_groupgmem0_DDR_router_2_arb_enable[1] = gmem0_DDR_icm_in_arb_enable[3];
      assign icm_groupgmem0_DDR_router_2_arb_read[1] = gmem0_DDR_icm_in_arb_read[3];
      assign icm_groupgmem0_DDR_router_2_arb_write[1] = gmem0_DDR_icm_in_arb_write[3];
      assign icm_groupgmem0_DDR_router_2_arb_burstcount[1] = gmem0_DDR_icm_in_arb_burstcount[3];
      assign icm_groupgmem0_DDR_router_2_arb_address[1] = gmem0_DDR_icm_in_arb_address[3];
      assign icm_groupgmem0_DDR_router_2_arb_writedata[1] = gmem0_DDR_icm_in_arb_writedata[3];
      assign icm_groupgmem0_DDR_router_2_arb_byteenable[1] = gmem0_DDR_icm_in_arb_byteenable[3];
      assign gmem0_DDR_icm_in_arb_stall[3] = icm_groupgmem0_DDR_router_2_arb_stall[1];
      assign gmem0_DDR_icm_in_wrp_ack[3] = icm_groupgmem0_DDR_router_2_wrp_ack[1];
      assign gmem0_DDR_icm_in_rrp_datavalid[3] = icm_groupgmem0_DDR_router_2_rrp_datavalid[1];
      assign gmem0_DDR_icm_in_rrp_data[3] = icm_groupgmem0_DDR_router_2_rrp_data[1];
      // INST global_ic_preroutegmem0_DDR_router_2 of CLMiner_kernel_stable_system_interconnect_2
      CLMiner_kernel_stable_system_interconnect_2 global_ic_preroutegmem0_DDR_router_2
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_groupgmem0_DDR_router_2_arb_request),
         .m_arb_enable(icm_groupgmem0_DDR_router_2_arb_enable),
         .m_arb_read(icm_groupgmem0_DDR_router_2_arb_read),
         .m_arb_write(icm_groupgmem0_DDR_router_2_arb_write),
         .m_arb_burstcount(icm_groupgmem0_DDR_router_2_arb_burstcount),
         .m_arb_address(icm_groupgmem0_DDR_router_2_arb_address),
         .m_arb_writedata(icm_groupgmem0_DDR_router_2_arb_writedata),
         .m_arb_byteenable(icm_groupgmem0_DDR_router_2_arb_byteenable),
         .m_arb_stall(icm_groupgmem0_DDR_router_2_arb_stall),
         .m_wrp_ack(icm_groupgmem0_DDR_router_2_wrp_ack),
         .m_rrp_datavalid(icm_groupgmem0_DDR_router_2_rrp_datavalid),
         .m_rrp_data(icm_groupgmem0_DDR_router_2_rrp_data),
         // ICM mout
         .mout_arb_request(gmem0_DDR_icm_preroute_arb_request[2]),
         .mout_arb_enable(gmem0_DDR_icm_preroute_arb_enable[2]),
         .mout_arb_read(gmem0_DDR_icm_preroute_arb_read[2]),
         .mout_arb_write(gmem0_DDR_icm_preroute_arb_write[2]),
         .mout_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[2]),
         .mout_arb_address(gmem0_DDR_icm_preroute_arb_address[2]),
         .mout_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[2]),
         .mout_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[2]),
         .mout_arb_id(),
         .mout_arb_stall(gmem0_DDR_icm_preroute_arb_stall[2]),
         .mout_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[2]),
         .mout_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[2]),
         .mout_rrp_data(gmem0_DDR_icm_preroute_rrp_data[2])
      );

      assign icm_groupgmem0_DDR_router_3_arb_request[0] = gmem0_DDR_icm_in_arb_request[8];
      assign icm_groupgmem0_DDR_router_3_arb_enable[0] = gmem0_DDR_icm_in_arb_enable[8];
      assign icm_groupgmem0_DDR_router_3_arb_read[0] = gmem0_DDR_icm_in_arb_read[8];
      assign icm_groupgmem0_DDR_router_3_arb_write[0] = gmem0_DDR_icm_in_arb_write[8];
      assign icm_groupgmem0_DDR_router_3_arb_burstcount[0] = gmem0_DDR_icm_in_arb_burstcount[8];
      assign icm_groupgmem0_DDR_router_3_arb_address[0] = gmem0_DDR_icm_in_arb_address[8];
      assign icm_groupgmem0_DDR_router_3_arb_writedata[0] = gmem0_DDR_icm_in_arb_writedata[8];
      assign icm_groupgmem0_DDR_router_3_arb_byteenable[0] = gmem0_DDR_icm_in_arb_byteenable[8];
      assign gmem0_DDR_icm_in_arb_stall[8] = icm_groupgmem0_DDR_router_3_arb_stall[0];
      assign gmem0_DDR_icm_in_wrp_ack[8] = icm_groupgmem0_DDR_router_3_wrp_ack[0];
      assign gmem0_DDR_icm_in_rrp_datavalid[8] = icm_groupgmem0_DDR_router_3_rrp_datavalid[0];
      assign gmem0_DDR_icm_in_rrp_data[8] = icm_groupgmem0_DDR_router_3_rrp_data[0];
      assign icm_groupgmem0_DDR_router_3_arb_request[1] = gmem0_DDR_icm_in_arb_request[5];
      assign icm_groupgmem0_DDR_router_3_arb_enable[1] = gmem0_DDR_icm_in_arb_enable[5];
      assign icm_groupgmem0_DDR_router_3_arb_read[1] = gmem0_DDR_icm_in_arb_read[5];
      assign icm_groupgmem0_DDR_router_3_arb_write[1] = gmem0_DDR_icm_in_arb_write[5];
      assign icm_groupgmem0_DDR_router_3_arb_burstcount[1] = gmem0_DDR_icm_in_arb_burstcount[5];
      assign icm_groupgmem0_DDR_router_3_arb_address[1] = gmem0_DDR_icm_in_arb_address[5];
      assign icm_groupgmem0_DDR_router_3_arb_writedata[1] = gmem0_DDR_icm_in_arb_writedata[5];
      assign icm_groupgmem0_DDR_router_3_arb_byteenable[1] = gmem0_DDR_icm_in_arb_byteenable[5];
      assign gmem0_DDR_icm_in_arb_stall[5] = icm_groupgmem0_DDR_router_3_arb_stall[1];
      assign gmem0_DDR_icm_in_wrp_ack[5] = icm_groupgmem0_DDR_router_3_wrp_ack[1];
      assign gmem0_DDR_icm_in_rrp_datavalid[5] = icm_groupgmem0_DDR_router_3_rrp_datavalid[1];
      assign gmem0_DDR_icm_in_rrp_data[5] = icm_groupgmem0_DDR_router_3_rrp_data[1];
      // INST global_ic_preroutegmem0_DDR_router_3 of CLMiner_kernel_stable_system_interconnect_3
      CLMiner_kernel_stable_system_interconnect_3 global_ic_preroutegmem0_DDR_router_3
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_groupgmem0_DDR_router_3_arb_request),
         .m_arb_enable(icm_groupgmem0_DDR_router_3_arb_enable),
         .m_arb_read(icm_groupgmem0_DDR_router_3_arb_read),
         .m_arb_write(icm_groupgmem0_DDR_router_3_arb_write),
         .m_arb_burstcount(icm_groupgmem0_DDR_router_3_arb_burstcount),
         .m_arb_address(icm_groupgmem0_DDR_router_3_arb_address),
         .m_arb_writedata(icm_groupgmem0_DDR_router_3_arb_writedata),
         .m_arb_byteenable(icm_groupgmem0_DDR_router_3_arb_byteenable),
         .m_arb_stall(icm_groupgmem0_DDR_router_3_arb_stall),
         .m_wrp_ack(icm_groupgmem0_DDR_router_3_wrp_ack),
         .m_rrp_datavalid(icm_groupgmem0_DDR_router_3_rrp_datavalid),
         .m_rrp_data(icm_groupgmem0_DDR_router_3_rrp_data),
         // ICM mout
         .mout_arb_request(gmem0_DDR_icm_preroute_arb_request[3]),
         .mout_arb_enable(gmem0_DDR_icm_preroute_arb_enable[3]),
         .mout_arb_read(gmem0_DDR_icm_preroute_arb_read[3]),
         .mout_arb_write(gmem0_DDR_icm_preroute_arb_write[3]),
         .mout_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[3]),
         .mout_arb_address(gmem0_DDR_icm_preroute_arb_address[3]),
         .mout_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[3]),
         .mout_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[3]),
         .mout_arb_id(),
         .mout_arb_stall(gmem0_DDR_icm_preroute_arb_stall[3]),
         .mout_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[3]),
         .mout_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[3]),
         .mout_rrp_data(gmem0_DDR_icm_preroute_rrp_data[3])
      );

      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:router
         logic b_arb_request [2];
         logic b_arb_enable [2];
         logic b_arb_read [2];
         logic b_arb_write [2];
         logic [4:0] b_arb_burstcount [2];
         logic [25:0] b_arb_address [2];
         logic [511:0] b_arb_writedata [2];
         logic [63:0] b_arb_byteenable [2];
         logic b_arb_stall [2];
         logic b_wrp_ack [2];
         logic b_rrp_datavalid [2];
         logic [511:0] b_rrp_data [2];
         logic [1:0] bank_select;

         // INST router of acl_ic_mem_router_reorder
         acl_ic_mem_router_reorder
         #(
            .BANK_SEL_BIT(4),
            .READ_DATA_FIFO_DEPTH(62),
            .WRITE_ACK_FIFO_DEPTH(62),
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .NUM_BANKS(2)
         )
         router
         (
            .clock(clock),
            .resetn(resetn),
            .bank_select(bank_select),
            // ICM m
            .m_arb_request(gmem0_DDR_icm_preroute_arb_request[__i]),
            .m_arb_enable(gmem0_DDR_icm_preroute_arb_enable[__i]),
            .m_arb_read(gmem0_DDR_icm_preroute_arb_read[__i]),
            .m_arb_write(gmem0_DDR_icm_preroute_arb_write[__i]),
            .m_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[__i]),
            .m_arb_address(gmem0_DDR_icm_preroute_arb_address[__i]),
            .m_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[__i]),
            .m_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[__i]),
            .m_arb_stall(gmem0_DDR_icm_preroute_arb_stall[__i]),
            .m_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[__i]),
            .m_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[__i]),
            .m_rrp_data(gmem0_DDR_icm_preroute_rrp_data[__i]),
            // ICM b
            .b_arb_request(b_arb_request),
            .b_arb_enable(b_arb_enable),
            .b_arb_read(b_arb_read),
            .b_arb_write(b_arb_write),
            .b_arb_burstcount(b_arb_burstcount),
            .b_arb_address(b_arb_address),
            .b_arb_writedata(b_arb_writedata),
            .b_arb_byteenable(b_arb_byteenable),
            .b_arb_stall(b_arb_stall),
            .b_wrp_ack(b_wrp_ack),
            .b_rrp_datavalid(b_rrp_datavalid),
            .b_rrp_data(b_rrp_data)
         );

         assign bank_select[0] = (gmem0_DDR_icm_preroute_arb_address[__i][26] == 1'b0);
         assign bank_select[1] = (gmem0_DDR_icm_preroute_arb_address[__i][26] == 1'b1);
      end

      // INST global_icgmem0_DDR_port_0_0_rw of CLMiner_kernel_stable_system_interconnect_4
      CLMiner_kernel_stable_system_interconnect_4 global_icgmem0_DDR_port_0_0_rw
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_routedgmem0_DDR_port_0_0_rw_arb_request),
         .m_arb_enable(icm_routedgmem0_DDR_port_0_0_rw_arb_enable),
         .m_arb_read(icm_routedgmem0_DDR_port_0_0_rw_arb_read),
         .m_arb_write(icm_routedgmem0_DDR_port_0_0_rw_arb_write),
         .m_arb_burstcount(icm_routedgmem0_DDR_port_0_0_rw_arb_burstcount),
         .m_arb_address(icm_routedgmem0_DDR_port_0_0_rw_arb_address),
         .m_arb_writedata(icm_routedgmem0_DDR_port_0_0_rw_arb_writedata),
         .m_arb_byteenable(icm_routedgmem0_DDR_port_0_0_rw_arb_byteenable),
         .m_arb_stall(icm_routedgmem0_DDR_port_0_0_rw_arb_stall),
         .m_wrp_ack(icm_routedgmem0_DDR_port_0_0_rw_wrp_ack),
         .m_rrp_datavalid(icm_routedgmem0_DDR_port_0_0_rw_rrp_datavalid),
         .m_rrp_data(icm_routedgmem0_DDR_port_0_0_rw_rrp_data),
         // ICM mout
         .mout_arb_request(icm_out_0_rw_arb_request[0]),
         .mout_arb_enable(icm_out_0_rw_arb_enable[0]),
         .mout_arb_read(icm_out_0_rw_arb_read[0]),
         .mout_arb_write(icm_out_0_rw_arb_write[0]),
         .mout_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .mout_arb_address(icm_out_0_rw_arb_address[0]),
         .mout_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .mout_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .mout_arb_id(icm_out_0_rw_arb_id[0]),
         .mout_arb_stall(icm_out_0_rw_arb_stall[0]),
         .mout_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .mout_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .mout_rrp_data(icm_out_0_rw_rrp_data[0])
      );

      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:mgmem0_DDR_port_0_0_rw
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_request[__i] = router[__i].b_arb_request[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_enable[__i] = router[__i].b_arb_enable[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_read[__i] = router[__i].b_arb_read[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_write[__i] = router[__i].b_arb_write[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_burstcount[__i] = router[__i].b_arb_burstcount[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_address[__i] = router[__i].b_arb_address[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_writedata[__i] = router[__i].b_arb_writedata[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_byteenable[__i] = router[__i].b_arb_byteenable[0];
         assign router[__i].b_arb_stall[0] = icm_routedgmem0_DDR_port_0_0_rw_arb_stall[__i];
         assign router[__i].b_wrp_ack[0] = icm_routedgmem0_DDR_port_0_0_rw_wrp_ack[__i];
         assign router[__i].b_rrp_datavalid[0] = icm_routedgmem0_DDR_port_0_0_rw_rrp_datavalid[__i];
         assign router[__i].b_rrp_data[0] = icm_routedgmem0_DDR_port_0_0_rw_rrp_data[__i];
      end

      // INST global_out_ic_to_avmgmem0_DDR_port_0_0_rw of acl_ic_to_avm
      acl_ic_to_avm
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(32),
         .BYTEENA_W(64),
         .LATENCY(0),
         .ID_W(2)
      )
      global_out_ic_to_avmgmem0_DDR_port_0_0_rw
      (
         // ICM ic
         .ic_arb_request(icm_out_0_rw_arb_request[0]),
         .ic_arb_enable(icm_out_0_rw_arb_enable[0]),
         .ic_arb_read(icm_out_0_rw_arb_read[0]),
         .ic_arb_write(icm_out_0_rw_arb_write[0]),
         .ic_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .ic_arb_address(icm_out_0_rw_arb_address[0]),
         .ic_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .ic_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .ic_arb_id(icm_out_0_rw_arb_id[0]),
         .ic_arb_stall(icm_out_0_rw_arb_stall[0]),
         .ic_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .ic_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .ic_rrp_data(icm_out_0_rw_rrp_data[0]),
         // AVM avm
         .avm_enable(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_enable),
         .avm_read(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_read),
         .avm_write(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_write),
         .avm_burstcount(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_burstcount),
         .avm_address(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_address),
         .avm_writedata(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_writedata),
         .avm_byteenable(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_byteenable),
         .avm_waitrequest(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_waitrequest),
         .avm_readdata(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_readdata),
         .avm_readdatavalid(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_readdatavalid),
         .avm_writeack(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_writeack),
         .clock(),
         .resetn()
      );

      // INST acl_atomics_nostallgmem0_DDR_port_0_0_rw of acl_atomics_nostall
      acl_atomics_nostall
      #(
         .DATA_WIDTH(512),
         .BURST_WIDTH(5),
         .ADDR_WIDTH(32),
         .BYTEEN_WIDTH(64),
         .USED_ATOMIC_OPERATIONS(1)
      )
      acl_atomics_nostallgmem0_DDR_port_0_0_rw
      (
         .clock(clock),
         .resetn(resetn),
         // AVM mem_arb
         .mem_arb_enable(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_enable),
         .mem_arb_read(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_read),
         .mem_arb_write(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_write),
         .mem_arb_burstcount(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_burstcount),
         .mem_arb_address(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_address),
         .mem_arb_writedata(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_writedata),
         .mem_arb_byteenable(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_byteenable),
         .mem_arb_waitrequest(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_waitrequest),
         .mem_arb_readdata(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_readdata),
         .mem_arb_readdatavalid(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_readdatavalid),
         .mem_arb_writeack(avm_mem_atomics_ingmem0_DDR_port_0_0_rw_writeack),
         // AVM mem_avm
         .mem_avm_enable(avm_memgmem0_DDR_port_0_0_rw_enable),
         .mem_avm_read(avm_memgmem0_DDR_port_0_0_rw_read),
         .mem_avm_write(avm_memgmem0_DDR_port_0_0_rw_write),
         .mem_avm_burstcount(avm_memgmem0_DDR_port_0_0_rw_burstcount),
         .mem_avm_address(avm_memgmem0_DDR_port_0_0_rw_address),
         .mem_avm_writedata(avm_memgmem0_DDR_port_0_0_rw_writedata),
         .mem_avm_byteenable(avm_memgmem0_DDR_port_0_0_rw_byteenable),
         .mem_avm_waitrequest(avm_memgmem0_DDR_port_0_0_rw_waitrequest),
         .mem_avm_readdata(avm_memgmem0_DDR_port_0_0_rw_readdata),
         .mem_avm_readdatavalid(avm_memgmem0_DDR_port_0_0_rw_readdatavalid),
         .mem_avm_writeack(avm_memgmem0_DDR_port_0_0_rw_writeack)
      );

      // INST global_icgmem0_DDR_port_1_0_rw of CLMiner_kernel_stable_system_interconnect_4
      CLMiner_kernel_stable_system_interconnect_4 global_icgmem0_DDR_port_1_0_rw
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_routedgmem0_DDR_port_1_0_rw_arb_request),
         .m_arb_enable(icm_routedgmem0_DDR_port_1_0_rw_arb_enable),
         .m_arb_read(icm_routedgmem0_DDR_port_1_0_rw_arb_read),
         .m_arb_write(icm_routedgmem0_DDR_port_1_0_rw_arb_write),
         .m_arb_burstcount(icm_routedgmem0_DDR_port_1_0_rw_arb_burstcount),
         .m_arb_address(icm_routedgmem0_DDR_port_1_0_rw_arb_address),
         .m_arb_writedata(icm_routedgmem0_DDR_port_1_0_rw_arb_writedata),
         .m_arb_byteenable(icm_routedgmem0_DDR_port_1_0_rw_arb_byteenable),
         .m_arb_stall(icm_routedgmem0_DDR_port_1_0_rw_arb_stall),
         .m_wrp_ack(icm_routedgmem0_DDR_port_1_0_rw_wrp_ack),
         .m_rrp_datavalid(icm_routedgmem0_DDR_port_1_0_rw_rrp_datavalid),
         .m_rrp_data(icm_routedgmem0_DDR_port_1_0_rw_rrp_data),
         // ICM mout
         .mout_arb_request(icm_out_0_rw_arb_request[1]),
         .mout_arb_enable(icm_out_0_rw_arb_enable[1]),
         .mout_arb_read(icm_out_0_rw_arb_read[1]),
         .mout_arb_write(icm_out_0_rw_arb_write[1]),
         .mout_arb_burstcount(icm_out_0_rw_arb_burstcount[1]),
         .mout_arb_address(icm_out_0_rw_arb_address[1]),
         .mout_arb_writedata(icm_out_0_rw_arb_writedata[1]),
         .mout_arb_byteenable(icm_out_0_rw_arb_byteenable[1]),
         .mout_arb_id(icm_out_0_rw_arb_id[1]),
         .mout_arb_stall(icm_out_0_rw_arb_stall[1]),
         .mout_wrp_ack(icm_out_0_rw_wrp_ack[1]),
         .mout_rrp_datavalid(icm_out_0_rw_rrp_datavalid[1]),
         .mout_rrp_data(icm_out_0_rw_rrp_data[1])
      );

      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:mgmem0_DDR_port_1_0_rw
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_request[__i] = router[__i].b_arb_request[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_enable[__i] = router[__i].b_arb_enable[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_read[__i] = router[__i].b_arb_read[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_write[__i] = router[__i].b_arb_write[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_burstcount[__i] = router[__i].b_arb_burstcount[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_address[__i] = router[__i].b_arb_address[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_writedata[__i] = router[__i].b_arb_writedata[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_byteenable[__i] = router[__i].b_arb_byteenable[1];
         assign router[__i].b_arb_stall[1] = icm_routedgmem0_DDR_port_1_0_rw_arb_stall[__i];
         assign router[__i].b_wrp_ack[1] = icm_routedgmem0_DDR_port_1_0_rw_wrp_ack[__i];
         assign router[__i].b_rrp_datavalid[1] = icm_routedgmem0_DDR_port_1_0_rw_rrp_datavalid[__i];
         assign router[__i].b_rrp_data[1] = icm_routedgmem0_DDR_port_1_0_rw_rrp_data[__i];
      end

      // INST global_out_ic_to_avmgmem0_DDR_port_1_0_rw of acl_ic_to_avm
      acl_ic_to_avm
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(32),
         .BYTEENA_W(64),
         .LATENCY(0),
         .ID_W(2)
      )
      global_out_ic_to_avmgmem0_DDR_port_1_0_rw
      (
         // ICM ic
         .ic_arb_request(icm_out_0_rw_arb_request[1]),
         .ic_arb_enable(icm_out_0_rw_arb_enable[1]),
         .ic_arb_read(icm_out_0_rw_arb_read[1]),
         .ic_arb_write(icm_out_0_rw_arb_write[1]),
         .ic_arb_burstcount(icm_out_0_rw_arb_burstcount[1]),
         .ic_arb_address(icm_out_0_rw_arb_address[1]),
         .ic_arb_writedata(icm_out_0_rw_arb_writedata[1]),
         .ic_arb_byteenable(icm_out_0_rw_arb_byteenable[1]),
         .ic_arb_id(icm_out_0_rw_arb_id[1]),
         .ic_arb_stall(icm_out_0_rw_arb_stall[1]),
         .ic_wrp_ack(icm_out_0_rw_wrp_ack[1]),
         .ic_rrp_datavalid(icm_out_0_rw_rrp_datavalid[1]),
         .ic_rrp_data(icm_out_0_rw_rrp_data[1]),
         // AVM avm
         .avm_enable(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_enable),
         .avm_read(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_read),
         .avm_write(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_write),
         .avm_burstcount(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_burstcount),
         .avm_address(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_address),
         .avm_writedata(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_writedata),
         .avm_byteenable(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_byteenable),
         .avm_waitrequest(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_waitrequest),
         .avm_readdata(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_readdata),
         .avm_readdatavalid(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_readdatavalid),
         .avm_writeack(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_writeack),
         .clock(),
         .resetn()
      );

      // INST acl_atomics_nostallgmem0_DDR_port_1_0_rw of acl_atomics_nostall
      acl_atomics_nostall
      #(
         .DATA_WIDTH(512),
         .BURST_WIDTH(5),
         .ADDR_WIDTH(32),
         .BYTEEN_WIDTH(64),
         .USED_ATOMIC_OPERATIONS(1)
      )
      acl_atomics_nostallgmem0_DDR_port_1_0_rw
      (
         .clock(clock),
         .resetn(resetn),
         // AVM mem_arb
         .mem_arb_enable(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_enable),
         .mem_arb_read(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_read),
         .mem_arb_write(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_write),
         .mem_arb_burstcount(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_burstcount),
         .mem_arb_address(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_address),
         .mem_arb_writedata(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_writedata),
         .mem_arb_byteenable(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_byteenable),
         .mem_arb_waitrequest(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_waitrequest),
         .mem_arb_readdata(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_readdata),
         .mem_arb_readdatavalid(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_readdatavalid),
         .mem_arb_writeack(avm_mem_atomics_ingmem0_DDR_port_1_0_rw_writeack),
         // AVM mem_avm
         .mem_avm_enable(avm_memgmem0_DDR_port_1_0_rw_enable),
         .mem_avm_read(avm_memgmem0_DDR_port_1_0_rw_read),
         .mem_avm_write(avm_memgmem0_DDR_port_1_0_rw_write),
         .mem_avm_burstcount(avm_memgmem0_DDR_port_1_0_rw_burstcount),
         .mem_avm_address(avm_memgmem0_DDR_port_1_0_rw_address),
         .mem_avm_writedata(avm_memgmem0_DDR_port_1_0_rw_writedata),
         .mem_avm_byteenable(avm_memgmem0_DDR_port_1_0_rw_byteenable),
         .mem_avm_waitrequest(avm_memgmem0_DDR_port_1_0_rw_waitrequest),
         .mem_avm_readdata(avm_memgmem0_DDR_port_1_0_rw_readdata),
         .mem_avm_readdatavalid(avm_memgmem0_DDR_port_1_0_rw_readdatavalid),
         .mem_avm_writeack(avm_memgmem0_DDR_port_1_0_rw_writeack)
      );

   end
   endgenerate

   assign gmem0_DDR_global_avm_enable[9] = const_mem_0.avm_fill_enable;
   assign gmem0_DDR_global_avm_read[9] = const_mem_0.avm_fill_read;
   assign gmem0_DDR_global_avm_write[9] = const_mem_0.avm_fill_write;
   assign gmem0_DDR_global_avm_burstcount[9] = const_mem_0.avm_fill_burstcount;
   assign gmem0_DDR_global_avm_address[9] = const_mem_0.avm_fill_address;
   assign gmem0_DDR_global_avm_writedata[9] = const_mem_0.avm_fill_writedata;
   assign gmem0_DDR_global_avm_byteenable[9] = const_mem_0.avm_fill_byteenable;
   assign const_mem_0.avm_fill_waitrequest = gmem0_DDR_global_avm_waitrequest[9];
   assign const_mem_0.avm_fill_readdata = gmem0_DDR_global_avm_readdata[9];
   assign const_mem_0.avm_fill_readdatavalid = gmem0_DDR_global_avm_readdatavalid[9];
   assign const_mem_0.avm_fill_writeack = gmem0_DDR_global_avm_writeack[9];
endmodule

/////////////////////////////////////////////////////////////////
// MODULE ethash_calculate_dag_item_partition_wrapper
/////////////////////////////////////////////////////////////////
module ethash_calculate_dag_item_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_ethash_calculate_dag_item,
   // AVS avs_ethash_calculate_dag_item_cra
   input logic avs_ethash_calculate_dag_item_cra_enable,
   input logic avs_ethash_calculate_dag_item_cra_read,
   input logic avs_ethash_calculate_dag_item_cra_write,
   input logic [3:0] avs_ethash_calculate_dag_item_cra_address,
   input logic [63:0] avs_ethash_calculate_dag_item_cra_writedata,
   input logic [7:0] avs_ethash_calculate_dag_item_cra_byteenable,
   output logic [63:0] avs_ethash_calculate_dag_item_cra_readdata,
   output logic avs_ethash_calculate_dag_item_cra_readdatavalid,
   // AVM ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0
   output logic ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_enable,
   output logic ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_read,
   output logic ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_write,
   output logic [4:0] ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_burstcount,
   output logic [32:0] ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_address,
   output logic [511:0] ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_writedata,
   output logic [63:0] ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_byteenable,
   input logic ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_waitrequest,
   input logic [511:0] ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_readdata,
   input logic ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_readdatavalid,
   input logic ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_writeack,
   // AVM ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193
   output logic ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_enable,
   output logic ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_read,
   output logic ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_write,
   output logic [4:0] ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_burstcount,
   output logic [32:0] ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_address,
   output logic [511:0] ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_writedata,
   output logic [63:0] ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_byteenable,
   input logic ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_waitrequest,
   input logic [511:0] ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_readdata,
   input logic ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_readdatavalid,
   input logic ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_writeack,
   // AVM ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15
   output logic ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_enable,
   output logic ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_read,
   output logic ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_write,
   output logic [4:0] ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_burstcount,
   output logic [32:0] ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_address,
   output logic [511:0] ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_writedata,
   output logic [63:0] ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_byteenable,
   input logic ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_waitrequest,
   input logic [511:0] ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_readdata,
   input logic ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_readdatavalid,
   input logic ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_writeack
);
   logic ethash_calculate_dag_item_start;
   logic [0:0] ethash_calculate_dag_item_start_chain;
   logic [0:0] ethash_calculate_dag_item_start_kernel_copy;
   logic [0:0] ethash_calculate_dag_item_start_task_fd;
   logic [0:0] ethash_calculate_dag_item_start_finish_element;
   logic ethash_calculate_dag_item_finish;
   logic [0:0] ethash_calculate_dag_item_finish_kernel_copy;
   logic [0:0] ethash_calculate_dag_item_finish_chain;
   logic [31:0] ethash_calculate_dag_item_global_size [2:0];
   logic [31:0] ethash_calculate_dag_item_num_groups [2:0];
   logic [31:0] ethash_calculate_dag_item_local_size [2:0];
   logic [31:0] ethash_calculate_dag_item_global_offset [2:0];
   logic [31:0] ethash_calculate_dag_item_work_dim;
   logic [31:0] ethash_calculate_dag_item_wg_size;
   logic [0:0] ethash_calculate_dag_item_wg_disp_stall_in;
   logic [0:0] ethash_calculate_dag_item_wg_disp_stall_in_lookahead;
   logic [0:0] ethash_calculate_dag_item_wg_disp_valid_out;
   logic ethash_calculate_dag_item_wg_disp_start_out;
   logic [31:0] ethash_calculate_dag_item_wg_disp_group_id_out [2:0];
   logic [31:0] ethash_calculate_dag_item_wg_disp_global_id_base_out [2:0];
   logic ethash_calculate_dag_item_wg_disp_dispatched_all_groups;
   logic [31:0] ethash_calculate_dag_item_global_id [1][2:0];
   logic [31:0] ethash_calculate_dag_item_local_id [1][2:0];
   logic [31:0] ethash_calculate_dag_item_group_id [1][2:0];
   logic [0:0] ethash_calculate_dag_item_pending_write;
   logic [0:0] ethash_calculate_dag_item_lsu_active;
   logic [0:0] ethash_calculate_dag_item_valid_in;
   logic [0:0] ethash_calculate_dag_item_valid_out;
   logic [0:0] ethash_calculate_dag_item_stall_in;
   logic [0:0] ethash_calculate_dag_item_stall_out;
   logic ethash_calculate_dag_item_cra_pending_write;
   logic ethash_calculate_dag_item_cra_lsu_active;
   logic ethash_calculate_dag_item_cra_valid_in;
   logic [191:0] ethash_calculate_dag_item_kernel_arguments;

   assign ethash_calculate_dag_item_start_chain[0] = ethash_calculate_dag_item_start;
   assign ethash_calculate_dag_item_finish_chain[0] = 1'b1;
   assign ethash_calculate_dag_item_cra_pending_write = |ethash_calculate_dag_item_pending_write;
   assign ethash_calculate_dag_item_cra_lsu_active = |ethash_calculate_dag_item_lsu_active;
   assign ethash_calculate_dag_item_cra_valid_in = |ethash_calculate_dag_item_valid_in;
   assign ethash_calculate_dag_item_stall_in = 0;
   // INST ethash_calculate_dag_item_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .FAMILY("Arria 10")
   )
   ethash_calculate_dag_item_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(ethash_calculate_dag_item_start),
      .num_groups(ethash_calculate_dag_item_num_groups),
      .local_size(ethash_calculate_dag_item_local_size),
      .stall_in(ethash_calculate_dag_item_wg_disp_stall_in),
      .stall_in_lookahead(ethash_calculate_dag_item_wg_disp_stall_in_lookahead),
      .valid_out(ethash_calculate_dag_item_wg_disp_valid_out),
      .group_id_out(ethash_calculate_dag_item_wg_disp_group_id_out),
      .global_id_base_out(ethash_calculate_dag_item_wg_disp_global_id_base_out),
      .start_out(ethash_calculate_dag_item_wg_disp_start_out),
      .dispatched_all_groups(ethash_calculate_dag_item_wg_disp_dispatched_all_groups)
   );

   // INST ethash_calculate_dag_item_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(19),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   ethash_calculate_dag_item_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(ethash_calculate_dag_item_start),
      .wg_size(ethash_calculate_dag_item_wg_size),
      .wg_dispatch_valid_out(ethash_calculate_dag_item_wg_disp_valid_out),
      .wg_dispatch_stall_in(ethash_calculate_dag_item_wg_disp_stall_in),
      .dispatched_all_groups(ethash_calculate_dag_item_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(ethash_calculate_dag_item_valid_out),
      .kernel_copy_stall_in(ethash_calculate_dag_item_stall_in),
      .pending_writes(ethash_calculate_dag_item_cra_pending_write),
      .finish(ethash_calculate_dag_item_finish)
   );

   // INST ethash_calculate_dag_item_cra_slave_inst of ethash_calculate_dag_item_function_cra_slave
   ethash_calculate_dag_item_function_cra_slave ethash_calculate_dag_item_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(ethash_calculate_dag_item_start),
      .finish(ethash_calculate_dag_item_finish),
      .global_offset_0(ethash_calculate_dag_item_global_offset[0]),
      .global_offset_1(ethash_calculate_dag_item_global_offset[1]),
      .global_offset_2(ethash_calculate_dag_item_global_offset[2]),
      .work_dim(ethash_calculate_dag_item_work_dim),
      .has_a_lsu_active(ethash_calculate_dag_item_cra_lsu_active),
      .has_a_write_pending(ethash_calculate_dag_item_cra_pending_write),
      .valid_in(ethash_calculate_dag_item_cra_valid_in),
      .global_size_0(ethash_calculate_dag_item_global_size[0]),
      .global_size_1(ethash_calculate_dag_item_global_size[1]),
      .global_size_2(ethash_calculate_dag_item_global_size[2]),
      .num_groups_0(ethash_calculate_dag_item_num_groups[0]),
      .num_groups_1(ethash_calculate_dag_item_num_groups[1]),
      .num_groups_2(ethash_calculate_dag_item_num_groups[2]),
      .local_size_0(ethash_calculate_dag_item_local_size[0]),
      .local_size_1(ethash_calculate_dag_item_local_size[1]),
      .local_size_2(ethash_calculate_dag_item_local_size[2]),
      .workgroup_size(ethash_calculate_dag_item_wg_size),
      .kernel_arguments(ethash_calculate_dag_item_kernel_arguments),
      .cra_irq(cra_irq_ethash_calculate_dag_item),
      // AVS avs_cra
      .avs_cra_enable(avs_ethash_calculate_dag_item_cra_enable),
      .avs_cra_read(avs_ethash_calculate_dag_item_cra_read),
      .avs_cra_write(avs_ethash_calculate_dag_item_cra_write),
      .avs_cra_address(avs_ethash_calculate_dag_item_cra_address),
      .avs_cra_writedata(avs_ethash_calculate_dag_item_cra_writedata),
      .avs_cra_byteenable(avs_ethash_calculate_dag_item_cra_byteenable),
      .avs_cra_readdata(avs_ethash_calculate_dag_item_cra_readdata),
      .avs_cra_readdatavalid(avs_ethash_calculate_dag_item_cra_readdatavalid)
   );

   // INST ethash_calculate_dag_item_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(31),
      .LOCAL_WIDTH_Y(31),
      .LOCAL_WIDTH_Z(31),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(1),
      .FAMILY("Arria 10")
   )
   ethash_calculate_dag_item_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(ethash_calculate_dag_item_wg_disp_start_out),
      .valid_in(ethash_calculate_dag_item_wg_disp_valid_out[0]),
      .stall_out(ethash_calculate_dag_item_wg_disp_stall_in[0]),
      .stall_out_lookahead(ethash_calculate_dag_item_wg_disp_stall_in_lookahead[0]),
      .stall_in(ethash_calculate_dag_item_stall_out[0]),
      .valid_out(ethash_calculate_dag_item_valid_in[0]),
      .group_id_in(ethash_calculate_dag_item_wg_disp_group_id_out),
      .global_id_base_in(ethash_calculate_dag_item_wg_disp_global_id_base_out),
      .local_size(ethash_calculate_dag_item_local_size),
      .global_size(ethash_calculate_dag_item_global_size),
      .local_id(ethash_calculate_dag_item_local_id[0]),
      .global_id(ethash_calculate_dag_item_global_id[0]),
      .group_id(ethash_calculate_dag_item_group_id[0])
   );

   // INST ethash_calculate_dag_item_inst_0 of ethash_calculate_dag_item_top_wrapper_0
   ethash_calculate_dag_item_top_wrapper_0 ethash_calculate_dag_item_inst_0
   (
      .start(ethash_calculate_dag_item_start_kernel_copy[0]),
      .kernel_arguments(ethash_calculate_dag_item_kernel_arguments),
      .work_dim(ethash_calculate_dag_item_work_dim),
      .global_offset(ethash_calculate_dag_item_global_offset),
      .kernel_valid_out(ethash_calculate_dag_item_valid_out[0]),
      .has_a_write_pending(ethash_calculate_dag_item_pending_write[0]),
      .has_a_lsu_active(ethash_calculate_dag_item_lsu_active[0]),
      .global_id(ethash_calculate_dag_item_global_id[0]),
      .local_id(ethash_calculate_dag_item_local_id[0]),
      .group_id(ethash_calculate_dag_item_group_id[0]),
      .global_size(ethash_calculate_dag_item_global_size),
      .local_size(ethash_calculate_dag_item_local_size),
      .num_groups(ethash_calculate_dag_item_num_groups),
      .workgroup_size(ethash_calculate_dag_item_wg_size),
      .kernel_stall_out(ethash_calculate_dag_item_stall_out[0]),
      .kernel_valid_in(ethash_calculate_dag_item_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memcoalesce_g_light_load_0
      .avm_memcoalesce_g_light_load_0_enable(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_enable),
      .avm_memcoalesce_g_light_load_0_read(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_read),
      .avm_memcoalesce_g_light_load_0_write(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_write),
      .avm_memcoalesce_g_light_load_0_burstcount(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_burstcount),
      .avm_memcoalesce_g_light_load_0_address(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_address),
      .avm_memcoalesce_g_light_load_0_writedata(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_writedata),
      .avm_memcoalesce_g_light_load_0_byteenable(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_byteenable),
      .avm_memcoalesce_g_light_load_0_waitrequest(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_waitrequest),
      .avm_memcoalesce_g_light_load_0_readdata(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_readdata),
      .avm_memcoalesce_g_light_load_0_readdatavalid(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_readdatavalid),
      .avm_memcoalesce_g_light_load_0_writeack(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_0_writeack),
      // AVM avm_memcoalesce_g_light_load_02193
      .avm_memcoalesce_g_light_load_02193_enable(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_enable),
      .avm_memcoalesce_g_light_load_02193_read(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_read),
      .avm_memcoalesce_g_light_load_02193_write(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_write),
      .avm_memcoalesce_g_light_load_02193_burstcount(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_burstcount),
      .avm_memcoalesce_g_light_load_02193_address(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_address),
      .avm_memcoalesce_g_light_load_02193_writedata(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_writedata),
      .avm_memcoalesce_g_light_load_02193_byteenable(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_byteenable),
      .avm_memcoalesce_g_light_load_02193_waitrequest(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_waitrequest),
      .avm_memcoalesce_g_light_load_02193_readdata(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_readdata),
      .avm_memcoalesce_g_light_load_02193_readdatavalid(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_readdatavalid),
      .avm_memcoalesce_g_light_load_02193_writeack(ethash_calculate_dag_item_0_avm_memcoalesce_g_light_load_02193_writeack),
      // AVM avm_unnamed_ethash_calculate_dag_item15
      .avm_unnamed_ethash_calculate_dag_item15_enable(ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_enable),
      .avm_unnamed_ethash_calculate_dag_item15_read(ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_read),
      .avm_unnamed_ethash_calculate_dag_item15_write(ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_write),
      .avm_unnamed_ethash_calculate_dag_item15_burstcount(ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_burstcount),
      .avm_unnamed_ethash_calculate_dag_item15_address(ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_address),
      .avm_unnamed_ethash_calculate_dag_item15_writedata(ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_writedata),
      .avm_unnamed_ethash_calculate_dag_item15_byteenable(ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_byteenable),
      .avm_unnamed_ethash_calculate_dag_item15_waitrequest(ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_waitrequest),
      .avm_unnamed_ethash_calculate_dag_item15_readdata(ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_readdata),
      .avm_unnamed_ethash_calculate_dag_item15_readdatavalid(ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_readdatavalid),
      .avm_unnamed_ethash_calculate_dag_item15_writeack(ethash_calculate_dag_item_0_avm_unnamed_ethash_calculate_dag_item15_writeack)
   );

   // INST ethash_calculate_dag_item_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   ethash_calculate_dag_item_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(ethash_calculate_dag_item_start_chain[0]),
      .start_kernel(ethash_calculate_dag_item_start_kernel_copy[0]),
      .start_finish_detector(ethash_calculate_dag_item_start_task_fd[0]),
      .start_finish_chain_element(ethash_calculate_dag_item_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE ethash_search_partition_wrapper
/////////////////////////////////////////////////////////////////
module ethash_search_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_ethash_search,
   // AVS avs_ethash_search_cra
   input logic avs_ethash_search_cra_enable,
   input logic avs_ethash_search_cra_read,
   input logic avs_ethash_search_cra_write,
   input logic [4:0] avs_ethash_search_cra_address,
   input logic [63:0] avs_ethash_search_cra_writedata,
   input logic [7:0] avs_ethash_search_cra_byteenable,
   output logic [63:0] avs_ethash_search_cra_readdata,
   output logic avs_ethash_search_cra_readdatavalid,
   // AVM ethash_search_0_avm_memcoalesce_g_header_load_0
   output logic ethash_search_0_avm_memcoalesce_g_header_load_0_enable,
   output logic ethash_search_0_avm_memcoalesce_g_header_load_0_read,
   output logic ethash_search_0_avm_memcoalesce_g_header_load_0_write,
   output logic ethash_search_0_avm_memcoalesce_g_header_load_0_burstcount,
   output logic [32:0] ethash_search_0_avm_memcoalesce_g_header_load_0_address,
   output logic [511:0] ethash_search_0_avm_memcoalesce_g_header_load_0_writedata,
   output logic [63:0] ethash_search_0_avm_memcoalesce_g_header_load_0_byteenable,
   input logic ethash_search_0_avm_memcoalesce_g_header_load_0_waitrequest,
   input logic [511:0] ethash_search_0_avm_memcoalesce_g_header_load_0_readdata,
   input logic ethash_search_0_avm_memcoalesce_g_header_load_0_readdatavalid,
   // AVM ethash_search_0_avm_call152
   output logic ethash_search_0_avm_call152_enable,
   output logic ethash_search_0_avm_call152_read,
   output logic ethash_search_0_avm_call152_write,
   output logic [4:0] ethash_search_0_avm_call152_burstcount,
   output logic [32:0] ethash_search_0_avm_call152_address,
   output logic [511:0] ethash_search_0_avm_call152_writedata,
   output logic [63:0] ethash_search_0_avm_call152_byteenable,
   input logic ethash_search_0_avm_call152_waitrequest,
   input logic [511:0] ethash_search_0_avm_call152_readdata,
   input logic ethash_search_0_avm_call152_readdatavalid,
   input logic ethash_search_0_avm_call152_writeack,
   // AVM ethash_search_0_avm_unnamed_ethash_search35
   output logic ethash_search_0_avm_unnamed_ethash_search35_enable,
   output logic ethash_search_0_avm_unnamed_ethash_search35_read,
   output logic ethash_search_0_avm_unnamed_ethash_search35_write,
   output logic [4:0] ethash_search_0_avm_unnamed_ethash_search35_burstcount,
   output logic [32:0] ethash_search_0_avm_unnamed_ethash_search35_address,
   output logic [511:0] ethash_search_0_avm_unnamed_ethash_search35_writedata,
   output logic [63:0] ethash_search_0_avm_unnamed_ethash_search35_byteenable,
   input logic ethash_search_0_avm_unnamed_ethash_search35_waitrequest,
   input logic [511:0] ethash_search_0_avm_unnamed_ethash_search35_readdata,
   input logic ethash_search_0_avm_unnamed_ethash_search35_readdatavalid,
   input logic ethash_search_0_avm_unnamed_ethash_search35_writeack,
   // AVM ethash_search_0_avm_unnamed_ethash_search61
   output logic ethash_search_0_avm_unnamed_ethash_search61_enable,
   output logic ethash_search_0_avm_unnamed_ethash_search61_read,
   output logic ethash_search_0_avm_unnamed_ethash_search61_write,
   output logic [4:0] ethash_search_0_avm_unnamed_ethash_search61_burstcount,
   output logic [32:0] ethash_search_0_avm_unnamed_ethash_search61_address,
   output logic [511:0] ethash_search_0_avm_unnamed_ethash_search61_writedata,
   output logic [63:0] ethash_search_0_avm_unnamed_ethash_search61_byteenable,
   input logic ethash_search_0_avm_unnamed_ethash_search61_waitrequest,
   input logic [511:0] ethash_search_0_avm_unnamed_ethash_search61_readdata,
   input logic ethash_search_0_avm_unnamed_ethash_search61_readdatavalid,
   input logic ethash_search_0_avm_unnamed_ethash_search61_writeack,
   // AVM ethash_search_0_avm_unnamed_ethash_search62
   output logic ethash_search_0_avm_unnamed_ethash_search62_enable,
   output logic ethash_search_0_avm_unnamed_ethash_search62_read,
   output logic ethash_search_0_avm_unnamed_ethash_search62_write,
   output logic [4:0] ethash_search_0_avm_unnamed_ethash_search62_burstcount,
   output logic [32:0] ethash_search_0_avm_unnamed_ethash_search62_address,
   output logic [511:0] ethash_search_0_avm_unnamed_ethash_search62_writedata,
   output logic [63:0] ethash_search_0_avm_unnamed_ethash_search62_byteenable,
   input logic ethash_search_0_avm_unnamed_ethash_search62_waitrequest,
   input logic [511:0] ethash_search_0_avm_unnamed_ethash_search62_readdata,
   input logic ethash_search_0_avm_unnamed_ethash_search62_readdatavalid,
   input logic ethash_search_0_avm_unnamed_ethash_search62_writeack,
   // AVM ethash_search_0_avm_unnamed_ethash_search63
   output logic ethash_search_0_avm_unnamed_ethash_search63_enable,
   output logic ethash_search_0_avm_unnamed_ethash_search63_read,
   output logic ethash_search_0_avm_unnamed_ethash_search63_write,
   output logic [4:0] ethash_search_0_avm_unnamed_ethash_search63_burstcount,
   output logic [32:0] ethash_search_0_avm_unnamed_ethash_search63_address,
   output logic [511:0] ethash_search_0_avm_unnamed_ethash_search63_writedata,
   output logic [63:0] ethash_search_0_avm_unnamed_ethash_search63_byteenable,
   input logic ethash_search_0_avm_unnamed_ethash_search63_waitrequest,
   input logic [511:0] ethash_search_0_avm_unnamed_ethash_search63_readdata,
   input logic ethash_search_0_avm_unnamed_ethash_search63_readdatavalid,
   input logic ethash_search_0_avm_unnamed_ethash_search63_writeack,
   // AVM ethash_search_0_avm_unnamed_ethash_search64
   output logic ethash_search_0_avm_unnamed_ethash_search64_enable,
   output logic ethash_search_0_avm_unnamed_ethash_search64_read,
   output logic ethash_search_0_avm_unnamed_ethash_search64_write,
   output logic [4:0] ethash_search_0_avm_unnamed_ethash_search64_burstcount,
   output logic [32:0] ethash_search_0_avm_unnamed_ethash_search64_address,
   output logic [511:0] ethash_search_0_avm_unnamed_ethash_search64_writedata,
   output logic [63:0] ethash_search_0_avm_unnamed_ethash_search64_byteenable,
   input logic ethash_search_0_avm_unnamed_ethash_search64_waitrequest,
   input logic [511:0] ethash_search_0_avm_unnamed_ethash_search64_readdata,
   input logic ethash_search_0_avm_unnamed_ethash_search64_readdatavalid,
   input logic ethash_search_0_avm_unnamed_ethash_search64_writeack
);
   logic ethash_search_start;
   logic [0:0] ethash_search_start_chain;
   logic [0:0] ethash_search_start_kernel_copy;
   logic [0:0] ethash_search_start_task_fd;
   logic [0:0] ethash_search_start_finish_element;
   logic ethash_search_finish;
   logic [0:0] ethash_search_finish_kernel_copy;
   logic [0:0] ethash_search_finish_chain;
   logic [31:0] ethash_search_global_size [2:0];
   logic [31:0] ethash_search_num_groups [2:0];
   logic [31:0] ethash_search_local_size [2:0];
   logic [31:0] ethash_search_global_offset [2:0];
   logic [31:0] ethash_search_work_dim;
   logic [31:0] ethash_search_wg_size;
   logic [0:0] ethash_search_wg_disp_stall_in;
   logic [0:0] ethash_search_wg_disp_stall_in_lookahead;
   logic [0:0] ethash_search_wg_disp_valid_out;
   logic ethash_search_wg_disp_start_out;
   logic [31:0] ethash_search_wg_disp_group_id_out [2:0];
   logic [31:0] ethash_search_wg_disp_global_id_base_out [2:0];
   logic ethash_search_wg_disp_dispatched_all_groups;
   logic [31:0] ethash_search_global_id [1][2:0];
   logic [31:0] ethash_search_local_id [1][2:0];
   logic [31:0] ethash_search_group_id [1][2:0];
   logic [0:0] ethash_search_pending_write;
   logic [0:0] ethash_search_lsu_active;
   logic [0:0] ethash_search_valid_in;
   logic [0:0] ethash_search_valid_out;
   logic [0:0] ethash_search_stall_in;
   logic [0:0] ethash_search_stall_out;
   logic ethash_search_cra_pending_write;
   logic ethash_search_cra_lsu_active;
   logic ethash_search_cra_valid_in;
   logic [351:0] ethash_search_kernel_arguments;

   assign ethash_search_start_chain[0] = ethash_search_start;
   assign ethash_search_finish_chain[0] = 1'b1;
   assign ethash_search_cra_pending_write = |ethash_search_pending_write;
   assign ethash_search_cra_lsu_active = |ethash_search_lsu_active;
   assign ethash_search_cra_valid_in = |ethash_search_valid_in;
   assign ethash_search_stall_in = 0;
   // INST ethash_search_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .FAMILY("Arria 10")
   )
   ethash_search_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(ethash_search_start),
      .num_groups(ethash_search_num_groups),
      .local_size(ethash_search_local_size),
      .stall_in(ethash_search_wg_disp_stall_in),
      .stall_in_lookahead(ethash_search_wg_disp_stall_in_lookahead),
      .valid_out(ethash_search_wg_disp_valid_out),
      .group_id_out(ethash_search_wg_disp_group_id_out),
      .global_id_base_out(ethash_search_wg_disp_global_id_base_out),
      .start_out(ethash_search_wg_disp_start_out),
      .dispatched_all_groups(ethash_search_wg_disp_dispatched_all_groups)
   );

   // INST ethash_search_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(19),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   ethash_search_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(ethash_search_start),
      .wg_size(ethash_search_wg_size),
      .wg_dispatch_valid_out(ethash_search_wg_disp_valid_out),
      .wg_dispatch_stall_in(ethash_search_wg_disp_stall_in),
      .dispatched_all_groups(ethash_search_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(ethash_search_valid_out),
      .kernel_copy_stall_in(ethash_search_stall_in),
      .pending_writes(ethash_search_cra_pending_write),
      .finish(ethash_search_finish)
   );

   // INST ethash_search_cra_slave_inst of ethash_search_function_cra_slave
   ethash_search_function_cra_slave ethash_search_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(ethash_search_start),
      .finish(ethash_search_finish),
      .global_offset_0(ethash_search_global_offset[0]),
      .global_offset_1(ethash_search_global_offset[1]),
      .global_offset_2(ethash_search_global_offset[2]),
      .work_dim(ethash_search_work_dim),
      .has_a_lsu_active(ethash_search_cra_lsu_active),
      .has_a_write_pending(ethash_search_cra_pending_write),
      .valid_in(ethash_search_cra_valid_in),
      .global_size_0(ethash_search_global_size[0]),
      .global_size_1(ethash_search_global_size[1]),
      .global_size_2(ethash_search_global_size[2]),
      .num_groups_0(ethash_search_num_groups[0]),
      .num_groups_1(ethash_search_num_groups[1]),
      .num_groups_2(ethash_search_num_groups[2]),
      .local_size_0(ethash_search_local_size[0]),
      .local_size_1(ethash_search_local_size[1]),
      .local_size_2(ethash_search_local_size[2]),
      .workgroup_size(ethash_search_wg_size),
      .kernel_arguments(ethash_search_kernel_arguments),
      .cra_irq(cra_irq_ethash_search),
      // AVS avs_cra
      .avs_cra_enable(avs_ethash_search_cra_enable),
      .avs_cra_read(avs_ethash_search_cra_read),
      .avs_cra_write(avs_ethash_search_cra_write),
      .avs_cra_address(avs_ethash_search_cra_address),
      .avs_cra_writedata(avs_ethash_search_cra_writedata),
      .avs_cra_byteenable(avs_ethash_search_cra_byteenable),
      .avs_cra_readdata(avs_ethash_search_cra_readdata),
      .avs_cra_readdatavalid(avs_ethash_search_cra_readdatavalid)
   );

   // INST ethash_search_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(7),
      .LOCAL_WIDTH_Y(1),
      .LOCAL_WIDTH_Z(1),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(1),
      .FAMILY("Arria 10")
   )
   ethash_search_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(ethash_search_wg_disp_start_out),
      .valid_in(ethash_search_wg_disp_valid_out[0]),
      .stall_out(ethash_search_wg_disp_stall_in[0]),
      .stall_out_lookahead(ethash_search_wg_disp_stall_in_lookahead[0]),
      .stall_in(ethash_search_stall_out[0]),
      .valid_out(ethash_search_valid_in[0]),
      .group_id_in(ethash_search_wg_disp_group_id_out),
      .global_id_base_in(ethash_search_wg_disp_global_id_base_out),
      .local_size(ethash_search_local_size),
      .global_size(ethash_search_global_size),
      .local_id(ethash_search_local_id[0]),
      .global_id(ethash_search_global_id[0]),
      .group_id(ethash_search_group_id[0])
   );

   // INST ethash_search_inst_0 of ethash_search_top_wrapper_0
   ethash_search_top_wrapper_0 ethash_search_inst_0
   (
      .start(ethash_search_start_kernel_copy[0]),
      .kernel_arguments(ethash_search_kernel_arguments),
      .work_dim(ethash_search_work_dim),
      .global_offset(ethash_search_global_offset),
      .kernel_valid_out(ethash_search_valid_out[0]),
      .has_a_write_pending(ethash_search_pending_write[0]),
      .has_a_lsu_active(ethash_search_lsu_active[0]),
      .global_id(ethash_search_global_id[0]),
      .local_id(ethash_search_local_id[0]),
      .group_id(ethash_search_group_id[0]),
      .global_size(ethash_search_global_size),
      .local_size(ethash_search_local_size),
      .num_groups(ethash_search_num_groups),
      .workgroup_size(ethash_search_wg_size),
      .kernel_stall_out(ethash_search_stall_out[0]),
      .kernel_valid_in(ethash_search_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memcoalesce_g_header_load_0
      .avm_memcoalesce_g_header_load_0_enable(ethash_search_0_avm_memcoalesce_g_header_load_0_enable),
      .avm_memcoalesce_g_header_load_0_read(ethash_search_0_avm_memcoalesce_g_header_load_0_read),
      .avm_memcoalesce_g_header_load_0_write(ethash_search_0_avm_memcoalesce_g_header_load_0_write),
      .avm_memcoalesce_g_header_load_0_burstcount(ethash_search_0_avm_memcoalesce_g_header_load_0_burstcount),
      .avm_memcoalesce_g_header_load_0_address(ethash_search_0_avm_memcoalesce_g_header_load_0_address),
      .avm_memcoalesce_g_header_load_0_writedata(ethash_search_0_avm_memcoalesce_g_header_load_0_writedata),
      .avm_memcoalesce_g_header_load_0_byteenable(ethash_search_0_avm_memcoalesce_g_header_load_0_byteenable),
      .avm_memcoalesce_g_header_load_0_waitrequest(ethash_search_0_avm_memcoalesce_g_header_load_0_waitrequest),
      .avm_memcoalesce_g_header_load_0_readdata(ethash_search_0_avm_memcoalesce_g_header_load_0_readdata),
      .avm_memcoalesce_g_header_load_0_readdatavalid(ethash_search_0_avm_memcoalesce_g_header_load_0_readdatavalid),
      // AVM avm_call152
      .avm_call152_enable(ethash_search_0_avm_call152_enable),
      .avm_call152_read(ethash_search_0_avm_call152_read),
      .avm_call152_write(ethash_search_0_avm_call152_write),
      .avm_call152_burstcount(ethash_search_0_avm_call152_burstcount),
      .avm_call152_address(ethash_search_0_avm_call152_address),
      .avm_call152_writedata(ethash_search_0_avm_call152_writedata),
      .avm_call152_byteenable(ethash_search_0_avm_call152_byteenable),
      .avm_call152_waitrequest(ethash_search_0_avm_call152_waitrequest),
      .avm_call152_readdata(ethash_search_0_avm_call152_readdata),
      .avm_call152_readdatavalid(ethash_search_0_avm_call152_readdatavalid),
      .avm_call152_writeack(ethash_search_0_avm_call152_writeack),
      // AVM avm_unnamed_ethash_search35
      .avm_unnamed_ethash_search35_enable(ethash_search_0_avm_unnamed_ethash_search35_enable),
      .avm_unnamed_ethash_search35_read(ethash_search_0_avm_unnamed_ethash_search35_read),
      .avm_unnamed_ethash_search35_write(ethash_search_0_avm_unnamed_ethash_search35_write),
      .avm_unnamed_ethash_search35_burstcount(ethash_search_0_avm_unnamed_ethash_search35_burstcount),
      .avm_unnamed_ethash_search35_address(ethash_search_0_avm_unnamed_ethash_search35_address),
      .avm_unnamed_ethash_search35_writedata(ethash_search_0_avm_unnamed_ethash_search35_writedata),
      .avm_unnamed_ethash_search35_byteenable(ethash_search_0_avm_unnamed_ethash_search35_byteenable),
      .avm_unnamed_ethash_search35_waitrequest(ethash_search_0_avm_unnamed_ethash_search35_waitrequest),
      .avm_unnamed_ethash_search35_readdata(ethash_search_0_avm_unnamed_ethash_search35_readdata),
      .avm_unnamed_ethash_search35_readdatavalid(ethash_search_0_avm_unnamed_ethash_search35_readdatavalid),
      .avm_unnamed_ethash_search35_writeack(ethash_search_0_avm_unnamed_ethash_search35_writeack),
      // AVM avm_unnamed_ethash_search61
      .avm_unnamed_ethash_search61_enable(ethash_search_0_avm_unnamed_ethash_search61_enable),
      .avm_unnamed_ethash_search61_read(ethash_search_0_avm_unnamed_ethash_search61_read),
      .avm_unnamed_ethash_search61_write(ethash_search_0_avm_unnamed_ethash_search61_write),
      .avm_unnamed_ethash_search61_burstcount(ethash_search_0_avm_unnamed_ethash_search61_burstcount),
      .avm_unnamed_ethash_search61_address(ethash_search_0_avm_unnamed_ethash_search61_address),
      .avm_unnamed_ethash_search61_writedata(ethash_search_0_avm_unnamed_ethash_search61_writedata),
      .avm_unnamed_ethash_search61_byteenable(ethash_search_0_avm_unnamed_ethash_search61_byteenable),
      .avm_unnamed_ethash_search61_waitrequest(ethash_search_0_avm_unnamed_ethash_search61_waitrequest),
      .avm_unnamed_ethash_search61_readdata(ethash_search_0_avm_unnamed_ethash_search61_readdata),
      .avm_unnamed_ethash_search61_readdatavalid(ethash_search_0_avm_unnamed_ethash_search61_readdatavalid),
      .avm_unnamed_ethash_search61_writeack(ethash_search_0_avm_unnamed_ethash_search61_writeack),
      // AVM avm_unnamed_ethash_search62
      .avm_unnamed_ethash_search62_enable(ethash_search_0_avm_unnamed_ethash_search62_enable),
      .avm_unnamed_ethash_search62_read(ethash_search_0_avm_unnamed_ethash_search62_read),
      .avm_unnamed_ethash_search62_write(ethash_search_0_avm_unnamed_ethash_search62_write),
      .avm_unnamed_ethash_search62_burstcount(ethash_search_0_avm_unnamed_ethash_search62_burstcount),
      .avm_unnamed_ethash_search62_address(ethash_search_0_avm_unnamed_ethash_search62_address),
      .avm_unnamed_ethash_search62_writedata(ethash_search_0_avm_unnamed_ethash_search62_writedata),
      .avm_unnamed_ethash_search62_byteenable(ethash_search_0_avm_unnamed_ethash_search62_byteenable),
      .avm_unnamed_ethash_search62_waitrequest(ethash_search_0_avm_unnamed_ethash_search62_waitrequest),
      .avm_unnamed_ethash_search62_readdata(ethash_search_0_avm_unnamed_ethash_search62_readdata),
      .avm_unnamed_ethash_search62_readdatavalid(ethash_search_0_avm_unnamed_ethash_search62_readdatavalid),
      .avm_unnamed_ethash_search62_writeack(ethash_search_0_avm_unnamed_ethash_search62_writeack),
      // AVM avm_unnamed_ethash_search63
      .avm_unnamed_ethash_search63_enable(ethash_search_0_avm_unnamed_ethash_search63_enable),
      .avm_unnamed_ethash_search63_read(ethash_search_0_avm_unnamed_ethash_search63_read),
      .avm_unnamed_ethash_search63_write(ethash_search_0_avm_unnamed_ethash_search63_write),
      .avm_unnamed_ethash_search63_burstcount(ethash_search_0_avm_unnamed_ethash_search63_burstcount),
      .avm_unnamed_ethash_search63_address(ethash_search_0_avm_unnamed_ethash_search63_address),
      .avm_unnamed_ethash_search63_writedata(ethash_search_0_avm_unnamed_ethash_search63_writedata),
      .avm_unnamed_ethash_search63_byteenable(ethash_search_0_avm_unnamed_ethash_search63_byteenable),
      .avm_unnamed_ethash_search63_waitrequest(ethash_search_0_avm_unnamed_ethash_search63_waitrequest),
      .avm_unnamed_ethash_search63_readdata(ethash_search_0_avm_unnamed_ethash_search63_readdata),
      .avm_unnamed_ethash_search63_readdatavalid(ethash_search_0_avm_unnamed_ethash_search63_readdatavalid),
      .avm_unnamed_ethash_search63_writeack(ethash_search_0_avm_unnamed_ethash_search63_writeack),
      // AVM avm_unnamed_ethash_search64
      .avm_unnamed_ethash_search64_enable(ethash_search_0_avm_unnamed_ethash_search64_enable),
      .avm_unnamed_ethash_search64_read(ethash_search_0_avm_unnamed_ethash_search64_read),
      .avm_unnamed_ethash_search64_write(ethash_search_0_avm_unnamed_ethash_search64_write),
      .avm_unnamed_ethash_search64_burstcount(ethash_search_0_avm_unnamed_ethash_search64_burstcount),
      .avm_unnamed_ethash_search64_address(ethash_search_0_avm_unnamed_ethash_search64_address),
      .avm_unnamed_ethash_search64_writedata(ethash_search_0_avm_unnamed_ethash_search64_writedata),
      .avm_unnamed_ethash_search64_byteenable(ethash_search_0_avm_unnamed_ethash_search64_byteenable),
      .avm_unnamed_ethash_search64_waitrequest(ethash_search_0_avm_unnamed_ethash_search64_waitrequest),
      .avm_unnamed_ethash_search64_readdata(ethash_search_0_avm_unnamed_ethash_search64_readdata),
      .avm_unnamed_ethash_search64_readdatavalid(ethash_search_0_avm_unnamed_ethash_search64_readdatavalid),
      .avm_unnamed_ethash_search64_writeack(ethash_search_0_avm_unnamed_ethash_search64_writeack)
   );

   // INST ethash_search_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   ethash_search_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(ethash_search_start_chain[0]),
      .start_kernel(ethash_search_start_kernel_copy[0]),
      .start_finish_detector(ethash_search_start_task_fd[0]),
      .start_finish_chain_element(ethash_search_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE ethash_calculate_dag_item_top_wrapper_0
/////////////////////////////////////////////////////////////////
module ethash_calculate_dag_item_top_wrapper_0
(
   input logic start,
   input logic [191:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_memcoalesce_g_light_load_0
   output logic avm_memcoalesce_g_light_load_0_enable,
   output logic avm_memcoalesce_g_light_load_0_read,
   output logic avm_memcoalesce_g_light_load_0_write,
   output logic [4:0] avm_memcoalesce_g_light_load_0_burstcount,
   output logic [32:0] avm_memcoalesce_g_light_load_0_address,
   output logic [511:0] avm_memcoalesce_g_light_load_0_writedata,
   output logic [63:0] avm_memcoalesce_g_light_load_0_byteenable,
   input logic avm_memcoalesce_g_light_load_0_waitrequest,
   input logic [511:0] avm_memcoalesce_g_light_load_0_readdata,
   input logic avm_memcoalesce_g_light_load_0_readdatavalid,
   input logic avm_memcoalesce_g_light_load_0_writeack,
   // AVM avm_memcoalesce_g_light_load_02193
   output logic avm_memcoalesce_g_light_load_02193_enable,
   output logic avm_memcoalesce_g_light_load_02193_read,
   output logic avm_memcoalesce_g_light_load_02193_write,
   output logic [4:0] avm_memcoalesce_g_light_load_02193_burstcount,
   output logic [32:0] avm_memcoalesce_g_light_load_02193_address,
   output logic [511:0] avm_memcoalesce_g_light_load_02193_writedata,
   output logic [63:0] avm_memcoalesce_g_light_load_02193_byteenable,
   input logic avm_memcoalesce_g_light_load_02193_waitrequest,
   input logic [511:0] avm_memcoalesce_g_light_load_02193_readdata,
   input logic avm_memcoalesce_g_light_load_02193_readdatavalid,
   input logic avm_memcoalesce_g_light_load_02193_writeack,
   // AVM avm_unnamed_ethash_calculate_dag_item15
   output logic avm_unnamed_ethash_calculate_dag_item15_enable,
   output logic avm_unnamed_ethash_calculate_dag_item15_read,
   output logic avm_unnamed_ethash_calculate_dag_item15_write,
   output logic [4:0] avm_unnamed_ethash_calculate_dag_item15_burstcount,
   output logic [32:0] avm_unnamed_ethash_calculate_dag_item15_address,
   output logic [511:0] avm_unnamed_ethash_calculate_dag_item15_writedata,
   output logic [63:0] avm_unnamed_ethash_calculate_dag_item15_byteenable,
   input logic avm_unnamed_ethash_calculate_dag_item15_waitrequest,
   input logic [511:0] avm_unnamed_ethash_calculate_dag_item15_readdata,
   input logic avm_unnamed_ethash_calculate_dag_item15_readdatavalid,
   input logic avm_unnamed_ethash_calculate_dag_item15_writeack
);
   logic lmem_invalid_single_bit;

   // INST kernel of ethash_calculate_dag_item_function_wrapper
   ethash_calculate_dag_item_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memcoalesce_g_light_load_0
      .avm_memcoalesce_g_light_load_0_enable(avm_memcoalesce_g_light_load_0_enable),
      .avm_memcoalesce_g_light_load_0_read(avm_memcoalesce_g_light_load_0_read),
      .avm_memcoalesce_g_light_load_0_write(avm_memcoalesce_g_light_load_0_write),
      .avm_memcoalesce_g_light_load_0_burstcount(avm_memcoalesce_g_light_load_0_burstcount),
      .avm_memcoalesce_g_light_load_0_address(avm_memcoalesce_g_light_load_0_address),
      .avm_memcoalesce_g_light_load_0_writedata(avm_memcoalesce_g_light_load_0_writedata),
      .avm_memcoalesce_g_light_load_0_byteenable(avm_memcoalesce_g_light_load_0_byteenable),
      .avm_memcoalesce_g_light_load_0_waitrequest(avm_memcoalesce_g_light_load_0_waitrequest),
      .avm_memcoalesce_g_light_load_0_readdata(avm_memcoalesce_g_light_load_0_readdata),
      .avm_memcoalesce_g_light_load_0_readdatavalid(avm_memcoalesce_g_light_load_0_readdatavalid),
      .avm_memcoalesce_g_light_load_0_writeack(avm_memcoalesce_g_light_load_0_writeack),
      // AVM avm_memcoalesce_g_light_load_02193
      .avm_memcoalesce_g_light_load_02193_enable(avm_memcoalesce_g_light_load_02193_enable),
      .avm_memcoalesce_g_light_load_02193_read(avm_memcoalesce_g_light_load_02193_read),
      .avm_memcoalesce_g_light_load_02193_write(avm_memcoalesce_g_light_load_02193_write),
      .avm_memcoalesce_g_light_load_02193_burstcount(avm_memcoalesce_g_light_load_02193_burstcount),
      .avm_memcoalesce_g_light_load_02193_address(avm_memcoalesce_g_light_load_02193_address),
      .avm_memcoalesce_g_light_load_02193_writedata(avm_memcoalesce_g_light_load_02193_writedata),
      .avm_memcoalesce_g_light_load_02193_byteenable(avm_memcoalesce_g_light_load_02193_byteenable),
      .avm_memcoalesce_g_light_load_02193_waitrequest(avm_memcoalesce_g_light_load_02193_waitrequest),
      .avm_memcoalesce_g_light_load_02193_readdata(avm_memcoalesce_g_light_load_02193_readdata),
      .avm_memcoalesce_g_light_load_02193_readdatavalid(avm_memcoalesce_g_light_load_02193_readdatavalid),
      .avm_memcoalesce_g_light_load_02193_writeack(avm_memcoalesce_g_light_load_02193_writeack),
      // AVM avm_unnamed_ethash_calculate_dag_item15
      .avm_unnamed_ethash_calculate_dag_item15_enable(avm_unnamed_ethash_calculate_dag_item15_enable),
      .avm_unnamed_ethash_calculate_dag_item15_read(avm_unnamed_ethash_calculate_dag_item15_read),
      .avm_unnamed_ethash_calculate_dag_item15_write(avm_unnamed_ethash_calculate_dag_item15_write),
      .avm_unnamed_ethash_calculate_dag_item15_burstcount(avm_unnamed_ethash_calculate_dag_item15_burstcount),
      .avm_unnamed_ethash_calculate_dag_item15_address(avm_unnamed_ethash_calculate_dag_item15_address),
      .avm_unnamed_ethash_calculate_dag_item15_writedata(avm_unnamed_ethash_calculate_dag_item15_writedata),
      .avm_unnamed_ethash_calculate_dag_item15_byteenable(avm_unnamed_ethash_calculate_dag_item15_byteenable),
      .avm_unnamed_ethash_calculate_dag_item15_waitrequest(avm_unnamed_ethash_calculate_dag_item15_waitrequest),
      .avm_unnamed_ethash_calculate_dag_item15_readdata(avm_unnamed_ethash_calculate_dag_item15_readdata),
      .avm_unnamed_ethash_calculate_dag_item15_readdatavalid(avm_unnamed_ethash_calculate_dag_item15_readdatavalid),
      .avm_unnamed_ethash_calculate_dag_item15_writeack(avm_unnamed_ethash_calculate_dag_item15_writeack)
   );

   assign lmem_invalid_single_bit = 'b0;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE ethash_search_top_wrapper_0
/////////////////////////////////////////////////////////////////
module ethash_search_top_wrapper_0
(
   input logic start,
   input logic [351:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_memcoalesce_g_header_load_0
   output logic avm_memcoalesce_g_header_load_0_enable,
   output logic avm_memcoalesce_g_header_load_0_read,
   output logic avm_memcoalesce_g_header_load_0_write,
   output logic avm_memcoalesce_g_header_load_0_burstcount,
   output logic [32:0] avm_memcoalesce_g_header_load_0_address,
   output logic [511:0] avm_memcoalesce_g_header_load_0_writedata,
   output logic [63:0] avm_memcoalesce_g_header_load_0_byteenable,
   input logic avm_memcoalesce_g_header_load_0_waitrequest,
   input logic [511:0] avm_memcoalesce_g_header_load_0_readdata,
   input logic avm_memcoalesce_g_header_load_0_readdatavalid,
   // AVM avm_call152
   output logic avm_call152_enable,
   output logic avm_call152_read,
   output logic avm_call152_write,
   output logic [4:0] avm_call152_burstcount,
   output logic [32:0] avm_call152_address,
   output logic [511:0] avm_call152_writedata,
   output logic [63:0] avm_call152_byteenable,
   input logic avm_call152_waitrequest,
   input logic [511:0] avm_call152_readdata,
   input logic avm_call152_readdatavalid,
   input logic avm_call152_writeack,
   // AVM avm_unnamed_ethash_search35
   output logic avm_unnamed_ethash_search35_enable,
   output logic avm_unnamed_ethash_search35_read,
   output logic avm_unnamed_ethash_search35_write,
   output logic [4:0] avm_unnamed_ethash_search35_burstcount,
   output logic [32:0] avm_unnamed_ethash_search35_address,
   output logic [511:0] avm_unnamed_ethash_search35_writedata,
   output logic [63:0] avm_unnamed_ethash_search35_byteenable,
   input logic avm_unnamed_ethash_search35_waitrequest,
   input logic [511:0] avm_unnamed_ethash_search35_readdata,
   input logic avm_unnamed_ethash_search35_readdatavalid,
   input logic avm_unnamed_ethash_search35_writeack,
   // AVM avm_unnamed_ethash_search61
   output logic avm_unnamed_ethash_search61_enable,
   output logic avm_unnamed_ethash_search61_read,
   output logic avm_unnamed_ethash_search61_write,
   output logic [4:0] avm_unnamed_ethash_search61_burstcount,
   output logic [32:0] avm_unnamed_ethash_search61_address,
   output logic [511:0] avm_unnamed_ethash_search61_writedata,
   output logic [63:0] avm_unnamed_ethash_search61_byteenable,
   input logic avm_unnamed_ethash_search61_waitrequest,
   input logic [511:0] avm_unnamed_ethash_search61_readdata,
   input logic avm_unnamed_ethash_search61_readdatavalid,
   input logic avm_unnamed_ethash_search61_writeack,
   // AVM avm_unnamed_ethash_search62
   output logic avm_unnamed_ethash_search62_enable,
   output logic avm_unnamed_ethash_search62_read,
   output logic avm_unnamed_ethash_search62_write,
   output logic [4:0] avm_unnamed_ethash_search62_burstcount,
   output logic [32:0] avm_unnamed_ethash_search62_address,
   output logic [511:0] avm_unnamed_ethash_search62_writedata,
   output logic [63:0] avm_unnamed_ethash_search62_byteenable,
   input logic avm_unnamed_ethash_search62_waitrequest,
   input logic [511:0] avm_unnamed_ethash_search62_readdata,
   input logic avm_unnamed_ethash_search62_readdatavalid,
   input logic avm_unnamed_ethash_search62_writeack,
   // AVM avm_unnamed_ethash_search63
   output logic avm_unnamed_ethash_search63_enable,
   output logic avm_unnamed_ethash_search63_read,
   output logic avm_unnamed_ethash_search63_write,
   output logic [4:0] avm_unnamed_ethash_search63_burstcount,
   output logic [32:0] avm_unnamed_ethash_search63_address,
   output logic [511:0] avm_unnamed_ethash_search63_writedata,
   output logic [63:0] avm_unnamed_ethash_search63_byteenable,
   input logic avm_unnamed_ethash_search63_waitrequest,
   input logic [511:0] avm_unnamed_ethash_search63_readdata,
   input logic avm_unnamed_ethash_search63_readdatavalid,
   input logic avm_unnamed_ethash_search63_writeack,
   // AVM avm_unnamed_ethash_search64
   output logic avm_unnamed_ethash_search64_enable,
   output logic avm_unnamed_ethash_search64_read,
   output logic avm_unnamed_ethash_search64_write,
   output logic [4:0] avm_unnamed_ethash_search64_burstcount,
   output logic [32:0] avm_unnamed_ethash_search64_address,
   output logic [511:0] avm_unnamed_ethash_search64_writedata,
   output logic [63:0] avm_unnamed_ethash_search64_byteenable,
   input logic avm_unnamed_ethash_search64_waitrequest,
   input logic [511:0] avm_unnamed_ethash_search64_readdata,
   input logic avm_unnamed_ethash_search64_readdatavalid,
   input logic avm_unnamed_ethash_search64_writeack
);
   genvar __i;
   genvar __j;
   logic lmem_invalid_single_bit;
   logic lmem_invalid_aspaces;
   logic local_avm_aspace5_enable [1][12];
   logic local_avm_aspace5_read [1][12];
   logic local_avm_aspace5_write [1][12];
   logic local_avm_aspace5_burstcount [1][12];
   logic [31:0] local_avm_aspace5_address [1][12];
   logic [127:0] local_avm_aspace5_writedata [1][12];
   logic [15:0] local_avm_aspace5_byteenable [1][12];
   logic local_avm_aspace5_waitrequest [1][12];
   logic [127:0] local_avm_aspace5_readdata [1][12];
   logic local_avm_aspace5_readdatavalid [1][12];
   logic local_avm_aspace5_writeack [1][12];

   // INST kernel of ethash_search_function_wrapper
   ethash_search_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memcoalesce_g_header_load_0
      .avm_memcoalesce_g_header_load_0_enable(avm_memcoalesce_g_header_load_0_enable),
      .avm_memcoalesce_g_header_load_0_read(avm_memcoalesce_g_header_load_0_read),
      .avm_memcoalesce_g_header_load_0_write(avm_memcoalesce_g_header_load_0_write),
      .avm_memcoalesce_g_header_load_0_burstcount(avm_memcoalesce_g_header_load_0_burstcount),
      .avm_memcoalesce_g_header_load_0_address(avm_memcoalesce_g_header_load_0_address),
      .avm_memcoalesce_g_header_load_0_writedata(avm_memcoalesce_g_header_load_0_writedata),
      .avm_memcoalesce_g_header_load_0_byteenable(avm_memcoalesce_g_header_load_0_byteenable),
      .avm_memcoalesce_g_header_load_0_waitrequest(avm_memcoalesce_g_header_load_0_waitrequest),
      .avm_memcoalesce_g_header_load_0_readdata(avm_memcoalesce_g_header_load_0_readdata),
      .avm_memcoalesce_g_header_load_0_readdatavalid(avm_memcoalesce_g_header_load_0_readdatavalid),
      // AVM avm_call152
      .avm_call152_enable(avm_call152_enable),
      .avm_call152_read(avm_call152_read),
      .avm_call152_write(avm_call152_write),
      .avm_call152_burstcount(avm_call152_burstcount),
      .avm_call152_address(avm_call152_address),
      .avm_call152_writedata(avm_call152_writedata),
      .avm_call152_byteenable(avm_call152_byteenable),
      .avm_call152_waitrequest(avm_call152_waitrequest),
      .avm_call152_readdata(avm_call152_readdata),
      .avm_call152_readdatavalid(avm_call152_readdatavalid),
      .avm_call152_writeack(avm_call152_writeack),
      // AVM avm_unnamed_ethash_search35
      .avm_unnamed_ethash_search35_enable(avm_unnamed_ethash_search35_enable),
      .avm_unnamed_ethash_search35_read(avm_unnamed_ethash_search35_read),
      .avm_unnamed_ethash_search35_write(avm_unnamed_ethash_search35_write),
      .avm_unnamed_ethash_search35_burstcount(avm_unnamed_ethash_search35_burstcount),
      .avm_unnamed_ethash_search35_address(avm_unnamed_ethash_search35_address),
      .avm_unnamed_ethash_search35_writedata(avm_unnamed_ethash_search35_writedata),
      .avm_unnamed_ethash_search35_byteenable(avm_unnamed_ethash_search35_byteenable),
      .avm_unnamed_ethash_search35_waitrequest(avm_unnamed_ethash_search35_waitrequest),
      .avm_unnamed_ethash_search35_readdata(avm_unnamed_ethash_search35_readdata),
      .avm_unnamed_ethash_search35_readdatavalid(avm_unnamed_ethash_search35_readdatavalid),
      .avm_unnamed_ethash_search35_writeack(avm_unnamed_ethash_search35_writeack),
      // AVM avm_unnamed_ethash_search61
      .avm_unnamed_ethash_search61_enable(avm_unnamed_ethash_search61_enable),
      .avm_unnamed_ethash_search61_read(avm_unnamed_ethash_search61_read),
      .avm_unnamed_ethash_search61_write(avm_unnamed_ethash_search61_write),
      .avm_unnamed_ethash_search61_burstcount(avm_unnamed_ethash_search61_burstcount),
      .avm_unnamed_ethash_search61_address(avm_unnamed_ethash_search61_address),
      .avm_unnamed_ethash_search61_writedata(avm_unnamed_ethash_search61_writedata),
      .avm_unnamed_ethash_search61_byteenable(avm_unnamed_ethash_search61_byteenable),
      .avm_unnamed_ethash_search61_waitrequest(avm_unnamed_ethash_search61_waitrequest),
      .avm_unnamed_ethash_search61_readdata(avm_unnamed_ethash_search61_readdata),
      .avm_unnamed_ethash_search61_readdatavalid(avm_unnamed_ethash_search61_readdatavalid),
      .avm_unnamed_ethash_search61_writeack(avm_unnamed_ethash_search61_writeack),
      // AVM avm_unnamed_ethash_search62
      .avm_unnamed_ethash_search62_enable(avm_unnamed_ethash_search62_enable),
      .avm_unnamed_ethash_search62_read(avm_unnamed_ethash_search62_read),
      .avm_unnamed_ethash_search62_write(avm_unnamed_ethash_search62_write),
      .avm_unnamed_ethash_search62_burstcount(avm_unnamed_ethash_search62_burstcount),
      .avm_unnamed_ethash_search62_address(avm_unnamed_ethash_search62_address),
      .avm_unnamed_ethash_search62_writedata(avm_unnamed_ethash_search62_writedata),
      .avm_unnamed_ethash_search62_byteenable(avm_unnamed_ethash_search62_byteenable),
      .avm_unnamed_ethash_search62_waitrequest(avm_unnamed_ethash_search62_waitrequest),
      .avm_unnamed_ethash_search62_readdata(avm_unnamed_ethash_search62_readdata),
      .avm_unnamed_ethash_search62_readdatavalid(avm_unnamed_ethash_search62_readdatavalid),
      .avm_unnamed_ethash_search62_writeack(avm_unnamed_ethash_search62_writeack),
      // AVM avm_unnamed_ethash_search63
      .avm_unnamed_ethash_search63_enable(avm_unnamed_ethash_search63_enable),
      .avm_unnamed_ethash_search63_read(avm_unnamed_ethash_search63_read),
      .avm_unnamed_ethash_search63_write(avm_unnamed_ethash_search63_write),
      .avm_unnamed_ethash_search63_burstcount(avm_unnamed_ethash_search63_burstcount),
      .avm_unnamed_ethash_search63_address(avm_unnamed_ethash_search63_address),
      .avm_unnamed_ethash_search63_writedata(avm_unnamed_ethash_search63_writedata),
      .avm_unnamed_ethash_search63_byteenable(avm_unnamed_ethash_search63_byteenable),
      .avm_unnamed_ethash_search63_waitrequest(avm_unnamed_ethash_search63_waitrequest),
      .avm_unnamed_ethash_search63_readdata(avm_unnamed_ethash_search63_readdata),
      .avm_unnamed_ethash_search63_readdatavalid(avm_unnamed_ethash_search63_readdatavalid),
      .avm_unnamed_ethash_search63_writeack(avm_unnamed_ethash_search63_writeack),
      // AVM avm_unnamed_ethash_search64
      .avm_unnamed_ethash_search64_enable(avm_unnamed_ethash_search64_enable),
      .avm_unnamed_ethash_search64_read(avm_unnamed_ethash_search64_read),
      .avm_unnamed_ethash_search64_write(avm_unnamed_ethash_search64_write),
      .avm_unnamed_ethash_search64_burstcount(avm_unnamed_ethash_search64_burstcount),
      .avm_unnamed_ethash_search64_address(avm_unnamed_ethash_search64_address),
      .avm_unnamed_ethash_search64_writedata(avm_unnamed_ethash_search64_writedata),
      .avm_unnamed_ethash_search64_byteenable(avm_unnamed_ethash_search64_byteenable),
      .avm_unnamed_ethash_search64_waitrequest(avm_unnamed_ethash_search64_waitrequest),
      .avm_unnamed_ethash_search64_readdata(avm_unnamed_ethash_search64_readdata),
      .avm_unnamed_ethash_search64_readdatavalid(avm_unnamed_ethash_search64_readdatavalid),
      .avm_unnamed_ethash_search64_writeack(avm_unnamed_ethash_search64_writeack),
      // AVM avm_memcoalesce_null_load_0
      .avm_memcoalesce_null_load_0_enable(local_avm_aspace5_enable[0][0]),
      .avm_memcoalesce_null_load_0_read(local_avm_aspace5_read[0][0]),
      .avm_memcoalesce_null_load_0_write(local_avm_aspace5_write[0][0]),
      .avm_memcoalesce_null_load_0_burstcount(local_avm_aspace5_burstcount[0][0]),
      .avm_memcoalesce_null_load_0_address(local_avm_aspace5_address[0][0]),
      .avm_memcoalesce_null_load_0_writedata(local_avm_aspace5_writedata[0][0]),
      .avm_memcoalesce_null_load_0_byteenable(local_avm_aspace5_byteenable[0][0]),
      .avm_memcoalesce_null_load_0_waitrequest(local_avm_aspace5_waitrequest[0][0]),
      .avm_memcoalesce_null_load_0_readdata(local_avm_aspace5_readdata[0][0]),
      .avm_memcoalesce_null_load_0_readdatavalid(local_avm_aspace5_readdatavalid[0][0]),
      .avm_memcoalesce_null_load_0_writeack(local_avm_aspace5_writeack[0][0]),
      // AVM avm_memcoalesce_null_load_016
      .avm_memcoalesce_null_load_016_enable(local_avm_aspace5_enable[0][1]),
      .avm_memcoalesce_null_load_016_read(local_avm_aspace5_read[0][1]),
      .avm_memcoalesce_null_load_016_write(local_avm_aspace5_write[0][1]),
      .avm_memcoalesce_null_load_016_burstcount(local_avm_aspace5_burstcount[0][1]),
      .avm_memcoalesce_null_load_016_address(local_avm_aspace5_address[0][1]),
      .avm_memcoalesce_null_load_016_writedata(local_avm_aspace5_writedata[0][1]),
      .avm_memcoalesce_null_load_016_byteenable(local_avm_aspace5_byteenable[0][1]),
      .avm_memcoalesce_null_load_016_waitrequest(local_avm_aspace5_waitrequest[0][1]),
      .avm_memcoalesce_null_load_016_readdata(local_avm_aspace5_readdata[0][1]),
      .avm_memcoalesce_null_load_016_readdatavalid(local_avm_aspace5_readdatavalid[0][1]),
      .avm_memcoalesce_null_load_016_writeack(local_avm_aspace5_writeack[0][1]),
      // AVM avm_memdep
      .avm_memdep_enable(local_avm_aspace5_enable[0][2]),
      .avm_memdep_read(local_avm_aspace5_read[0][2]),
      .avm_memdep_write(local_avm_aspace5_write[0][2]),
      .avm_memdep_burstcount(local_avm_aspace5_burstcount[0][2]),
      .avm_memdep_address(local_avm_aspace5_address[0][2]),
      .avm_memdep_writedata(local_avm_aspace5_writedata[0][2]),
      .avm_memdep_byteenable(local_avm_aspace5_byteenable[0][2]),
      .avm_memdep_waitrequest(local_avm_aspace5_waitrequest[0][2]),
      .avm_memdep_readdata(local_avm_aspace5_readdata[0][2]),
      .avm_memdep_readdatavalid(local_avm_aspace5_readdatavalid[0][2]),
      .avm_memdep_writeack(local_avm_aspace5_writeack[0][2]),
      // AVM avm_memdep_198
      .avm_memdep_198_enable(local_avm_aspace5_enable[0][3]),
      .avm_memdep_198_read(local_avm_aspace5_read[0][3]),
      .avm_memdep_198_write(local_avm_aspace5_write[0][3]),
      .avm_memdep_198_burstcount(local_avm_aspace5_burstcount[0][3]),
      .avm_memdep_198_address(local_avm_aspace5_address[0][3]),
      .avm_memdep_198_writedata(local_avm_aspace5_writedata[0][3]),
      .avm_memdep_198_byteenable(local_avm_aspace5_byteenable[0][3]),
      .avm_memdep_198_waitrequest(local_avm_aspace5_waitrequest[0][3]),
      .avm_memdep_198_readdata(local_avm_aspace5_readdata[0][3]),
      .avm_memdep_198_readdatavalid(local_avm_aspace5_readdatavalid[0][3]),
      .avm_memdep_198_writeack(local_avm_aspace5_writeack[0][3]),
      // AVM avm_memdep_199
      .avm_memdep_199_enable(local_avm_aspace5_enable[0][4]),
      .avm_memdep_199_read(local_avm_aspace5_read[0][4]),
      .avm_memdep_199_write(local_avm_aspace5_write[0][4]),
      .avm_memdep_199_burstcount(local_avm_aspace5_burstcount[0][4]),
      .avm_memdep_199_address(local_avm_aspace5_address[0][4]),
      .avm_memdep_199_writedata(local_avm_aspace5_writedata[0][4]),
      .avm_memdep_199_byteenable(local_avm_aspace5_byteenable[0][4]),
      .avm_memdep_199_waitrequest(local_avm_aspace5_waitrequest[0][4]),
      .avm_memdep_199_readdata(local_avm_aspace5_readdata[0][4]),
      .avm_memdep_199_readdatavalid(local_avm_aspace5_readdatavalid[0][4]),
      .avm_memdep_199_writeack(local_avm_aspace5_writeack[0][4]),
      // AVM avm_memdep_200
      .avm_memdep_200_enable(local_avm_aspace5_enable[0][5]),
      .avm_memdep_200_read(local_avm_aspace5_read[0][5]),
      .avm_memdep_200_write(local_avm_aspace5_write[0][5]),
      .avm_memdep_200_burstcount(local_avm_aspace5_burstcount[0][5]),
      .avm_memdep_200_address(local_avm_aspace5_address[0][5]),
      .avm_memdep_200_writedata(local_avm_aspace5_writedata[0][5]),
      .avm_memdep_200_byteenable(local_avm_aspace5_byteenable[0][5]),
      .avm_memdep_200_waitrequest(local_avm_aspace5_waitrequest[0][5]),
      .avm_memdep_200_readdata(local_avm_aspace5_readdata[0][5]),
      .avm_memdep_200_readdatavalid(local_avm_aspace5_readdatavalid[0][5]),
      .avm_memdep_200_writeack(local_avm_aspace5_writeack[0][5]),
      // AVM avm_memdep_203
      .avm_memdep_203_enable(local_avm_aspace5_enable[0][6]),
      .avm_memdep_203_read(local_avm_aspace5_read[0][6]),
      .avm_memdep_203_write(local_avm_aspace5_write[0][6]),
      .avm_memdep_203_burstcount(local_avm_aspace5_burstcount[0][6]),
      .avm_memdep_203_address(local_avm_aspace5_address[0][6]),
      .avm_memdep_203_writedata(local_avm_aspace5_writedata[0][6]),
      .avm_memdep_203_byteenable(local_avm_aspace5_byteenable[0][6]),
      .avm_memdep_203_waitrequest(local_avm_aspace5_waitrequest[0][6]),
      .avm_memdep_203_readdata(local_avm_aspace5_readdata[0][6]),
      .avm_memdep_203_readdatavalid(local_avm_aspace5_readdatavalid[0][6]),
      .avm_memdep_203_writeack(local_avm_aspace5_writeack[0][6]),
      // AVM avm_memdep_204
      .avm_memdep_204_enable(local_avm_aspace5_enable[0][7]),
      .avm_memdep_204_read(local_avm_aspace5_read[0][7]),
      .avm_memdep_204_write(local_avm_aspace5_write[0][7]),
      .avm_memdep_204_burstcount(local_avm_aspace5_burstcount[0][7]),
      .avm_memdep_204_address(local_avm_aspace5_address[0][7]),
      .avm_memdep_204_writedata(local_avm_aspace5_writedata[0][7]),
      .avm_memdep_204_byteenable(local_avm_aspace5_byteenable[0][7]),
      .avm_memdep_204_waitrequest(local_avm_aspace5_waitrequest[0][7]),
      .avm_memdep_204_readdata(local_avm_aspace5_readdata[0][7]),
      .avm_memdep_204_readdatavalid(local_avm_aspace5_readdatavalid[0][7]),
      .avm_memdep_204_writeack(local_avm_aspace5_writeack[0][7]),
      // AVM avm_memdep_205
      .avm_memdep_205_enable(local_avm_aspace5_enable[0][8]),
      .avm_memdep_205_read(local_avm_aspace5_read[0][8]),
      .avm_memdep_205_write(local_avm_aspace5_write[0][8]),
      .avm_memdep_205_burstcount(local_avm_aspace5_burstcount[0][8]),
      .avm_memdep_205_address(local_avm_aspace5_address[0][8]),
      .avm_memdep_205_writedata(local_avm_aspace5_writedata[0][8]),
      .avm_memdep_205_byteenable(local_avm_aspace5_byteenable[0][8]),
      .avm_memdep_205_waitrequest(local_avm_aspace5_waitrequest[0][8]),
      .avm_memdep_205_readdata(local_avm_aspace5_readdata[0][8]),
      .avm_memdep_205_readdatavalid(local_avm_aspace5_readdatavalid[0][8]),
      .avm_memdep_205_writeack(local_avm_aspace5_writeack[0][8]),
      // AVM avm_unnamed_ethash_search27
      .avm_unnamed_ethash_search27_enable(local_avm_aspace5_enable[0][9]),
      .avm_unnamed_ethash_search27_read(local_avm_aspace5_read[0][9]),
      .avm_unnamed_ethash_search27_write(local_avm_aspace5_write[0][9]),
      .avm_unnamed_ethash_search27_burstcount(local_avm_aspace5_burstcount[0][9]),
      .avm_unnamed_ethash_search27_address(local_avm_aspace5_address[0][9]),
      .avm_unnamed_ethash_search27_writedata(local_avm_aspace5_writedata[0][9]),
      .avm_unnamed_ethash_search27_byteenable(local_avm_aspace5_byteenable[0][9]),
      .avm_unnamed_ethash_search27_waitrequest(local_avm_aspace5_waitrequest[0][9]),
      .avm_unnamed_ethash_search27_readdata(local_avm_aspace5_readdata[0][9]),
      .avm_unnamed_ethash_search27_readdatavalid(local_avm_aspace5_readdatavalid[0][9]),
      .avm_unnamed_ethash_search27_writeack(local_avm_aspace5_writeack[0][9]),
      // AVM avm_unnamed_ethash_search28
      .avm_unnamed_ethash_search28_enable(local_avm_aspace5_enable[0][10]),
      .avm_unnamed_ethash_search28_read(local_avm_aspace5_read[0][10]),
      .avm_unnamed_ethash_search28_write(local_avm_aspace5_write[0][10]),
      .avm_unnamed_ethash_search28_burstcount(local_avm_aspace5_burstcount[0][10]),
      .avm_unnamed_ethash_search28_address(local_avm_aspace5_address[0][10]),
      .avm_unnamed_ethash_search28_writedata(local_avm_aspace5_writedata[0][10]),
      .avm_unnamed_ethash_search28_byteenable(local_avm_aspace5_byteenable[0][10]),
      .avm_unnamed_ethash_search28_waitrequest(local_avm_aspace5_waitrequest[0][10]),
      .avm_unnamed_ethash_search28_readdata(local_avm_aspace5_readdata[0][10]),
      .avm_unnamed_ethash_search28_readdatavalid(local_avm_aspace5_readdatavalid[0][10]),
      .avm_unnamed_ethash_search28_writeack(local_avm_aspace5_writeack[0][10]),
      // AVM avm_unnamed_ethash_search34
      .avm_unnamed_ethash_search34_enable(local_avm_aspace5_enable[0][11]),
      .avm_unnamed_ethash_search34_read(local_avm_aspace5_read[0][11]),
      .avm_unnamed_ethash_search34_write(local_avm_aspace5_write[0][11]),
      .avm_unnamed_ethash_search34_burstcount(local_avm_aspace5_burstcount[0][11]),
      .avm_unnamed_ethash_search34_address(local_avm_aspace5_address[0][11]),
      .avm_unnamed_ethash_search34_writedata(local_avm_aspace5_writedata[0][11]),
      .avm_unnamed_ethash_search34_byteenable(local_avm_aspace5_byteenable[0][11]),
      .avm_unnamed_ethash_search34_waitrequest(local_avm_aspace5_waitrequest[0][11]),
      .avm_unnamed_ethash_search34_readdata(local_avm_aspace5_readdata[0][11]),
      .avm_unnamed_ethash_search34_readdatavalid(local_avm_aspace5_readdatavalid[0][11]),
      .avm_unnamed_ethash_search34_writeack(local_avm_aspace5_writeack[0][11])
   );

   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace5
      logic local_icm_arb_request [1][12];
      logic local_icm_arb_enable [1][12];
      logic local_icm_arb_read [1][12];
      logic local_icm_arb_write [1][12];
      logic local_icm_arb_burstcount [1][12];
      logic [9:0] local_icm_arb_address [1][12];
      logic [127:0] local_icm_arb_writedata [1][12];
      logic [15:0] local_icm_arb_byteenable [1][12];
      logic local_icm_arb_stall [1][12];
      logic local_icm_wrp_ack [1][12];
      logic local_icm_rrp_datavalid [1][12];
      logic [127:0] local_icm_rrp_data [1][12];
      logic invalid_access_grps;

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         logic [31:0] invalid_access_terms;

         for( __j = 0; __j < 12; __j = __j + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(128),
               .WRITEDATA_W(128),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(16)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace5_enable[__i][__j]),
               .avm_read(local_avm_aspace5_read[__i][__j]),
               .avm_write(local_avm_aspace5_write[__i][__j]),
               .avm_burstcount(local_avm_aspace5_burstcount[__i][__j]),
               .avm_address(local_avm_aspace5_address[__i][__j]),
               .avm_writedata(local_avm_aspace5_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace5_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace5_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace5_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace5_readdatavalid[__i][__j]),
               .avm_writeack(local_avm_aspace5_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 4; __j = __j + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [7:0] port_address [1:4];
            logic [127:0] port_writedata [1:4];
            logic [15:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [127:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(192),
               .WIDTH(128),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __j = 0; __j < 12; __j = __j + 1 )
         begin:router
            logic b_arb_request [4];
            logic b_arb_enable [4];
            logic b_arb_read [4];
            logic b_arb_write [4];
            logic b_arb_burstcount [4];
            logic [7:0] b_arb_address [4];
            logic [127:0] b_arb_writedata [4];
            logic [15:0] b_arb_byteenable [4];
            logic b_arb_stall [4];
            logic b_wrp_ack [4];
            logic b_rrp_datavalid [4];
            logic [127:0] b_rrp_data [4];
            logic [3:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(128),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(10),
               .BYTEENA_W(16),
               .NUM_BANKS(4)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__i][__j][9:8] == 2'b00);
            assign bank_select[1] = (local_icm_arb_address[__i][__j][9:8] == 2'b01);
            assign bank_select[2] = (local_icm_arb_address[__i][__j][9:8] == 2'b10);
            assign bank_select[3] = (local_icm_arb_address[__i][__j][9:8] == 2'b11);
         end

         assign invalid_access_grps = |invalid_access_terms;
         // INST acl_ic_local_mem_router_terminator_m0b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m0b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[0].b_arb_request[1]),
            .b_arb_read(router[0].b_arb_read[1]),
            .b_arb_write(router[0].b_arb_write[1]),
            .b_arb_stall(router[0].b_arb_stall[1]),
            .b_wrp_ack(router[0].b_wrp_ack[1]),
            .b_rrp_datavalid(router[0].b_rrp_datavalid[1]),
            .b_rrp_data(router[0].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[0])
         );

         // INST acl_ic_local_mem_router_terminator_m0b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m0b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[0].b_arb_request[2]),
            .b_arb_read(router[0].b_arb_read[2]),
            .b_arb_write(router[0].b_arb_write[2]),
            .b_arb_stall(router[0].b_arb_stall[2]),
            .b_wrp_ack(router[0].b_wrp_ack[2]),
            .b_rrp_datavalid(router[0].b_rrp_datavalid[2]),
            .b_rrp_data(router[0].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[1])
         );

         // INST acl_ic_local_mem_router_terminator_m0b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m0b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[0].b_arb_request[3]),
            .b_arb_read(router[0].b_arb_read[3]),
            .b_arb_write(router[0].b_arb_write[3]),
            .b_arb_stall(router[0].b_arb_stall[3]),
            .b_wrp_ack(router[0].b_wrp_ack[3]),
            .b_rrp_datavalid(router[0].b_rrp_datavalid[3]),
            .b_rrp_data(router[0].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[2])
         );

         // INST acl_ic_local_mem_router_terminator_m1b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m1b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[1].b_arb_request[0]),
            .b_arb_read(router[1].b_arb_read[0]),
            .b_arb_write(router[1].b_arb_write[0]),
            .b_arb_stall(router[1].b_arb_stall[0]),
            .b_wrp_ack(router[1].b_wrp_ack[0]),
            .b_rrp_datavalid(router[1].b_rrp_datavalid[0]),
            .b_rrp_data(router[1].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[3])
         );

         // INST acl_ic_local_mem_router_terminator_m1b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m1b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[1].b_arb_request[2]),
            .b_arb_read(router[1].b_arb_read[2]),
            .b_arb_write(router[1].b_arb_write[2]),
            .b_arb_stall(router[1].b_arb_stall[2]),
            .b_wrp_ack(router[1].b_wrp_ack[2]),
            .b_rrp_datavalid(router[1].b_rrp_datavalid[2]),
            .b_rrp_data(router[1].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[4])
         );

         // INST acl_ic_local_mem_router_terminator_m1b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m1b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[1].b_arb_request[3]),
            .b_arb_read(router[1].b_arb_read[3]),
            .b_arb_write(router[1].b_arb_write[3]),
            .b_arb_stall(router[1].b_arb_stall[3]),
            .b_wrp_ack(router[1].b_wrp_ack[3]),
            .b_rrp_datavalid(router[1].b_rrp_datavalid[3]),
            .b_rrp_data(router[1].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[5])
         );

         // INST acl_ic_local_mem_router_terminator_m2b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m2b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[2].b_arb_request[0]),
            .b_arb_read(router[2].b_arb_read[0]),
            .b_arb_write(router[2].b_arb_write[0]),
            .b_arb_stall(router[2].b_arb_stall[0]),
            .b_wrp_ack(router[2].b_wrp_ack[0]),
            .b_rrp_datavalid(router[2].b_rrp_datavalid[0]),
            .b_rrp_data(router[2].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[6])
         );

         // INST acl_ic_local_mem_router_terminator_m2b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m2b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[2].b_arb_request[1]),
            .b_arb_read(router[2].b_arb_read[1]),
            .b_arb_write(router[2].b_arb_write[1]),
            .b_arb_stall(router[2].b_arb_stall[1]),
            .b_wrp_ack(router[2].b_wrp_ack[1]),
            .b_rrp_datavalid(router[2].b_rrp_datavalid[1]),
            .b_rrp_data(router[2].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[7])
         );

         // INST acl_ic_local_mem_router_terminator_m2b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m2b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[2].b_arb_request[2]),
            .b_arb_read(router[2].b_arb_read[2]),
            .b_arb_write(router[2].b_arb_write[2]),
            .b_arb_stall(router[2].b_arb_stall[2]),
            .b_wrp_ack(router[2].b_wrp_ack[2]),
            .b_rrp_datavalid(router[2].b_rrp_datavalid[2]),
            .b_rrp_data(router[2].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[8])
         );

         // INST acl_ic_local_mem_router_terminator_m3b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m3b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[3].b_arb_request[0]),
            .b_arb_read(router[3].b_arb_read[0]),
            .b_arb_write(router[3].b_arb_write[0]),
            .b_arb_stall(router[3].b_arb_stall[0]),
            .b_wrp_ack(router[3].b_wrp_ack[0]),
            .b_rrp_datavalid(router[3].b_rrp_datavalid[0]),
            .b_rrp_data(router[3].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[9])
         );

         // INST acl_ic_local_mem_router_terminator_m3b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m3b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[3].b_arb_request[1]),
            .b_arb_read(router[3].b_arb_read[1]),
            .b_arb_write(router[3].b_arb_write[1]),
            .b_arb_stall(router[3].b_arb_stall[1]),
            .b_wrp_ack(router[3].b_wrp_ack[1]),
            .b_rrp_datavalid(router[3].b_rrp_datavalid[1]),
            .b_rrp_data(router[3].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[10])
         );

         // INST acl_ic_local_mem_router_terminator_m3b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m3b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[3].b_arb_request[3]),
            .b_arb_read(router[3].b_arb_read[3]),
            .b_arb_write(router[3].b_arb_write[3]),
            .b_arb_stall(router[3].b_arb_stall[3]),
            .b_wrp_ack(router[3].b_wrp_ack[3]),
            .b_rrp_datavalid(router[3].b_rrp_datavalid[3]),
            .b_rrp_data(router[3].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[11])
         );

         // INST acl_ic_local_mem_router_terminator_m4b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m4b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[4].b_arb_request[0]),
            .b_arb_read(router[4].b_arb_read[0]),
            .b_arb_write(router[4].b_arb_write[0]),
            .b_arb_stall(router[4].b_arb_stall[0]),
            .b_wrp_ack(router[4].b_wrp_ack[0]),
            .b_rrp_datavalid(router[4].b_rrp_datavalid[0]),
            .b_rrp_data(router[4].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[12])
         );

         // INST acl_ic_local_mem_router_terminator_m4b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m4b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[4].b_arb_request[2]),
            .b_arb_read(router[4].b_arb_read[2]),
            .b_arb_write(router[4].b_arb_write[2]),
            .b_arb_stall(router[4].b_arb_stall[2]),
            .b_wrp_ack(router[4].b_wrp_ack[2]),
            .b_rrp_datavalid(router[4].b_rrp_datavalid[2]),
            .b_rrp_data(router[4].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[13])
         );

         // INST acl_ic_local_mem_router_terminator_m4b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m4b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[4].b_arb_request[3]),
            .b_arb_read(router[4].b_arb_read[3]),
            .b_arb_write(router[4].b_arb_write[3]),
            .b_arb_stall(router[4].b_arb_stall[3]),
            .b_wrp_ack(router[4].b_wrp_ack[3]),
            .b_rrp_datavalid(router[4].b_rrp_datavalid[3]),
            .b_rrp_data(router[4].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[14])
         );

         // INST acl_ic_local_mem_router_terminator_m5b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m5b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[5].b_arb_request[1]),
            .b_arb_read(router[5].b_arb_read[1]),
            .b_arb_write(router[5].b_arb_write[1]),
            .b_arb_stall(router[5].b_arb_stall[1]),
            .b_wrp_ack(router[5].b_wrp_ack[1]),
            .b_rrp_datavalid(router[5].b_rrp_datavalid[1]),
            .b_rrp_data(router[5].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[15])
         );

         // INST acl_ic_local_mem_router_terminator_m5b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m5b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[5].b_arb_request[2]),
            .b_arb_read(router[5].b_arb_read[2]),
            .b_arb_write(router[5].b_arb_write[2]),
            .b_arb_stall(router[5].b_arb_stall[2]),
            .b_wrp_ack(router[5].b_wrp_ack[2]),
            .b_rrp_datavalid(router[5].b_rrp_datavalid[2]),
            .b_rrp_data(router[5].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[16])
         );

         // INST acl_ic_local_mem_router_terminator_m5b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m5b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[5].b_arb_request[3]),
            .b_arb_read(router[5].b_arb_read[3]),
            .b_arb_write(router[5].b_arb_write[3]),
            .b_arb_stall(router[5].b_arb_stall[3]),
            .b_wrp_ack(router[5].b_wrp_ack[3]),
            .b_rrp_datavalid(router[5].b_rrp_datavalid[3]),
            .b_rrp_data(router[5].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[17])
         );

         // INST acl_ic_local_mem_router_terminator_m6b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m6b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[6].b_arb_request[1]),
            .b_arb_read(router[6].b_arb_read[1]),
            .b_arb_write(router[6].b_arb_write[1]),
            .b_arb_stall(router[6].b_arb_stall[1]),
            .b_wrp_ack(router[6].b_wrp_ack[1]),
            .b_rrp_datavalid(router[6].b_rrp_datavalid[1]),
            .b_rrp_data(router[6].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[18])
         );

         // INST acl_ic_local_mem_router_terminator_m6b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m6b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[6].b_arb_request[2]),
            .b_arb_read(router[6].b_arb_read[2]),
            .b_arb_write(router[6].b_arb_write[2]),
            .b_arb_stall(router[6].b_arb_stall[2]),
            .b_wrp_ack(router[6].b_wrp_ack[2]),
            .b_rrp_datavalid(router[6].b_rrp_datavalid[2]),
            .b_rrp_data(router[6].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[19])
         );

         // INST acl_ic_local_mem_router_terminator_m6b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m6b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[6].b_arb_request[3]),
            .b_arb_read(router[6].b_arb_read[3]),
            .b_arb_write(router[6].b_arb_write[3]),
            .b_arb_stall(router[6].b_arb_stall[3]),
            .b_wrp_ack(router[6].b_wrp_ack[3]),
            .b_rrp_datavalid(router[6].b_rrp_datavalid[3]),
            .b_rrp_data(router[6].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[20])
         );

         // INST acl_ic_local_mem_router_terminator_m7b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m7b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[7].b_arb_request[1]),
            .b_arb_read(router[7].b_arb_read[1]),
            .b_arb_write(router[7].b_arb_write[1]),
            .b_arb_stall(router[7].b_arb_stall[1]),
            .b_wrp_ack(router[7].b_wrp_ack[1]),
            .b_rrp_datavalid(router[7].b_rrp_datavalid[1]),
            .b_rrp_data(router[7].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[21])
         );

         // INST acl_ic_local_mem_router_terminator_m7b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m7b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[7].b_arb_request[2]),
            .b_arb_read(router[7].b_arb_read[2]),
            .b_arb_write(router[7].b_arb_write[2]),
            .b_arb_stall(router[7].b_arb_stall[2]),
            .b_wrp_ack(router[7].b_wrp_ack[2]),
            .b_rrp_datavalid(router[7].b_rrp_datavalid[2]),
            .b_rrp_data(router[7].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[22])
         );

         // INST acl_ic_local_mem_router_terminator_m7b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m7b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[7].b_arb_request[3]),
            .b_arb_read(router[7].b_arb_read[3]),
            .b_arb_write(router[7].b_arb_write[3]),
            .b_arb_stall(router[7].b_arb_stall[3]),
            .b_wrp_ack(router[7].b_wrp_ack[3]),
            .b_rrp_datavalid(router[7].b_rrp_datavalid[3]),
            .b_rrp_data(router[7].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[23])
         );

         // INST acl_ic_local_mem_router_terminator_m8b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m8b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[8].b_arb_request[2]),
            .b_arb_read(router[8].b_arb_read[2]),
            .b_arb_write(router[8].b_arb_write[2]),
            .b_arb_stall(router[8].b_arb_stall[2]),
            .b_wrp_ack(router[8].b_wrp_ack[2]),
            .b_rrp_datavalid(router[8].b_rrp_datavalid[2]),
            .b_rrp_data(router[8].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[24])
         );

         // INST acl_ic_local_mem_router_terminator_m8b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m8b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[8].b_arb_request[3]),
            .b_arb_read(router[8].b_arb_read[3]),
            .b_arb_write(router[8].b_arb_write[3]),
            .b_arb_stall(router[8].b_arb_stall[3]),
            .b_wrp_ack(router[8].b_wrp_ack[3]),
            .b_rrp_datavalid(router[8].b_rrp_datavalid[3]),
            .b_rrp_data(router[8].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[25])
         );

         // INST acl_ic_local_mem_router_terminator_m10b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m10b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[10].b_arb_request[1]),
            .b_arb_read(router[10].b_arb_read[1]),
            .b_arb_write(router[10].b_arb_write[1]),
            .b_arb_stall(router[10].b_arb_stall[1]),
            .b_wrp_ack(router[10].b_wrp_ack[1]),
            .b_rrp_datavalid(router[10].b_rrp_datavalid[1]),
            .b_rrp_data(router[10].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[26])
         );

         // INST acl_ic_local_mem_router_terminator_m10b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m10b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[10].b_arb_request[2]),
            .b_arb_read(router[10].b_arb_read[2]),
            .b_arb_write(router[10].b_arb_write[2]),
            .b_arb_stall(router[10].b_arb_stall[2]),
            .b_wrp_ack(router[10].b_wrp_ack[2]),
            .b_rrp_datavalid(router[10].b_rrp_datavalid[2]),
            .b_rrp_data(router[10].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[27])
         );

         // INST acl_ic_local_mem_router_terminator_m10b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m10b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[10].b_arb_request[3]),
            .b_arb_read(router[10].b_arb_read[3]),
            .b_arb_write(router[10].b_arb_write[3]),
            .b_arb_stall(router[10].b_arb_stall[3]),
            .b_wrp_ack(router[10].b_wrp_ack[3]),
            .b_rrp_datavalid(router[10].b_rrp_datavalid[3]),
            .b_rrp_data(router[10].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[28])
         );

         // INST acl_ic_local_mem_router_terminator_m11b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m11b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[11].b_arb_request[1]),
            .b_arb_read(router[11].b_arb_read[1]),
            .b_arb_write(router[11].b_arb_write[1]),
            .b_arb_stall(router[11].b_arb_stall[1]),
            .b_wrp_ack(router[11].b_wrp_ack[1]),
            .b_rrp_datavalid(router[11].b_rrp_datavalid[1]),
            .b_rrp_data(router[11].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[29])
         );

         // INST acl_ic_local_mem_router_terminator_m11b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m11b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[11].b_arb_request[2]),
            .b_arb_read(router[11].b_arb_read[2]),
            .b_arb_write(router[11].b_arb_write[2]),
            .b_arb_stall(router[11].b_arb_stall[2]),
            .b_wrp_ack(router[11].b_wrp_ack[2]),
            .b_rrp_datavalid(router[11].b_rrp_datavalid[2]),
            .b_rrp_data(router[11].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[30])
         );

         // INST acl_ic_local_mem_router_terminator_m11b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(128)
         )
         acl_ic_local_mem_router_terminator_m11b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[11].b_arb_request[3]),
            .b_arb_read(router[11].b_arb_read[3]),
            .b_arb_write(router[11].b_arb_write[3]),
            .b_arb_stall(router[11].b_arb_stall[3]),
            .b_wrp_ack(router[11].b_wrp_ack[3]),
            .b_rrp_datavalid(router[11].b_rrp_datavalid[3]),
            .b_rrp_data(router[11].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[31])
         );

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [7:0] icm_in_arb_address [2];
            logic [127:0] icm_in_arb_writedata [2];
            logic [15:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [127:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [7:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[5].b_arb_read[0];
            assign icm_in_arb_write[0] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[9].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[9].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[9].b_arb_read[0];
            assign icm_in_arb_write[1] = router[9].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[9].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[9].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[9].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[9].b_arb_byteenable[0];
            assign router[9].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[9].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[9].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[9].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of CLMiner_kernel_stable_system_interconnect_5
            CLMiner_kernel_stable_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [7:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [7:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[4].b_arb_read[1];
            assign icm_in_arb_write[0] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of CLMiner_kernel_stable_system_interconnect_6
            CLMiner_kernel_stable_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [7:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [7:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[3].b_arb_read[2];
            assign icm_in_arb_write[0] = router[3].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[3].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[2];
            assign router[3].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of CLMiner_kernel_stable_system_interconnect_6
            CLMiner_kernel_stable_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [7:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [7:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[2].b_arb_read[3];
            assign icm_in_arb_write[0] = router[2].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[2].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[3];
            assign router[2].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of CLMiner_kernel_stable_system_interconnect_6
            CLMiner_kernel_stable_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [7:0] icm_in_arb_address [2];
            logic [127:0] icm_in_arb_writedata [2];
            logic [15:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [127:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [7:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[6].b_arb_read[0];
            assign icm_in_arb_write[0] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[10].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[10].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[10].b_arb_read[0];
            assign icm_in_arb_write[1] = router[10].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[10].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[10].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[10].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[10].b_arb_byteenable[0];
            assign router[10].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[10].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[10].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[10].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of CLMiner_kernel_stable_system_interconnect_5
            CLMiner_kernel_stable_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [7:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [7:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[8].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[8].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[8].b_arb_read[1];
            assign icm_in_arb_write[0] = router[8].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[8].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[8].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[8].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[8].b_arb_byteenable[1];
            assign router[8].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[8].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[8].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[8].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of CLMiner_kernel_stable_system_interconnect_6
            CLMiner_kernel_stable_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [7:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [7:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[9].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[9].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[9].b_arb_read[2];
            assign icm_in_arb_write[0] = router[9].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[9].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[9].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[9].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[9].b_arb_byteenable[2];
            assign router[9].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[9].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[9].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[9].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of CLMiner_kernel_stable_system_interconnect_7
            CLMiner_kernel_stable_system_interconnect_7 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [7:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [7:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[9].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[9].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[9].b_arb_read[3];
            assign icm_in_arb_write[0] = router[9].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[9].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[9].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[9].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[9].b_arb_byteenable[3];
            assign router[9].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[9].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[9].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[9].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of CLMiner_kernel_stable_system_interconnect_7
            CLMiner_kernel_stable_system_interconnect_7 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [7:0] icm_in_arb_address [2];
            logic [127:0] icm_in_arb_writedata [2];
            logic [15:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [127:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [7:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[7].b_arb_read[0];
            assign icm_in_arb_write[0] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[11].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[11].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[11].b_arb_read[0];
            assign icm_in_arb_write[1] = router[11].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[11].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[11].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[11].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[11].b_arb_byteenable[0];
            assign router[11].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[11].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[11].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[11].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of CLMiner_kernel_stable_system_interconnect_5
            CLMiner_kernel_stable_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [7:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [7:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[9].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[9].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[9].b_arb_read[1];
            assign icm_in_arb_write[0] = router[9].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[9].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[9].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[9].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[9].b_arb_byteenable[1];
            assign router[9].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[9].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[9].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[9].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of CLMiner_kernel_stable_system_interconnect_7
            CLMiner_kernel_stable_system_interconnect_7 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank2
            assign bank[2].port_enable[3] = '0;
            assign bank[2].port_read[3] = '0;
            assign bank[2].port_write[3] = '0;
            assign bank[2].port_address[3] = '0;
            assign bank[2].port_writedata[3] = '0;
            assign bank[2].port_byteenable[3] = '0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank3
            assign bank[3].port_enable[3] = '0;
            assign bank[3].port_read[3] = '0;
            assign bank[3].port_write[3] = '0;
            assign bank[3].port_address[3] = '0;
            assign bank[3].port_writedata[3] = '0;
            assign bank[3].port_byteenable[3] = '0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [7:0] icm_in_arb_address [2];
            logic [127:0] icm_in_arb_writedata [2];
            logic [15:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [127:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [7:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[8].b_arb_read[0];
            assign icm_in_arb_write[1] = router[8].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[8].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[0];
            assign router[8].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of CLMiner_kernel_stable_system_interconnect_8
            CLMiner_kernel_stable_system_interconnect_8 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [7:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [7:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of CLMiner_kernel_stable_system_interconnect_7
            CLMiner_kernel_stable_system_interconnect_7 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank2
            assign bank[2].port_enable[4] = '0;
            assign bank[2].port_read[4] = '0;
            assign bank[2].port_write[4] = '0;
            assign bank[2].port_address[4] = '0;
            assign bank[2].port_writedata[4] = '0;
            assign bank[2].port_byteenable[4] = '0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank3
            assign bank[3].port_enable[4] = '0;
            assign bank[3].port_read[4] = '0;
            assign bank[3].port_write[4] = '0;
            assign bank[3].port_address[4] = '0;
            assign bank[3].port_writedata[4] = '0;
            assign bank[3].port_byteenable[4] = '0;
         end

      end

      assign lmem_invalid_aspaces = |invalid_access_grps;
   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE CLMiner_kernel_stable_system_interconnect_0
/////////////////////////////////////////////////////////////////
module CLMiner_kernel_stable_system_interconnect_0
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic [4:0] m_arb_burstcount [3],
   input logic [26:0] m_arb_address [3],
   input logic [511:0] m_arb_writedata [3],
   input logic [63:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [511:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic [4:0] mout_arb_burstcount,
   output logic [26:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2),
            .NUM_READ_MASTERS(2),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(2),
         .NUM_READ_MASTERS(2),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(64),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE CLMiner_kernel_stable_system_interconnect_1
/////////////////////////////////////////////////////////////////
module CLMiner_kernel_stable_system_interconnect_1
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic [4:0] m_arb_burstcount [3],
   input logic [26:0] m_arb_address [3],
   input logic [511:0] m_arb_writedata [3],
   input logic [63:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [511:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic [4:0] mout_arb_burstcount,
   output logic [26:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(2),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(2),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(64),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(2),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE CLMiner_kernel_stable_system_interconnect_2
/////////////////////////////////////////////////////////////////
module CLMiner_kernel_stable_system_interconnect_2
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic [4:0] m_arb_burstcount [2],
   input logic [26:0] m_arb_address [2],
   input logic [511:0] m_arb_writedata [2],
   input logic [63:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [511:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic [4:0] mout_arb_burstcount,
   output logic [26:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_MASTERS(2),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_MASTERS(2),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(64),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE CLMiner_kernel_stable_system_interconnect_3
/////////////////////////////////////////////////////////////////
module CLMiner_kernel_stable_system_interconnect_3
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic [4:0] m_arb_burstcount [2],
   input logic [26:0] m_arb_address [2],
   input logic [511:0] m_arb_writedata [2],
   input logic [63:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [511:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic [4:0] mout_arb_burstcount,
   output logic [26:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(2),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(64),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE CLMiner_kernel_stable_system_interconnect_4
/////////////////////////////////////////////////////////////////
module CLMiner_kernel_stable_system_interconnect_4
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [4],
   input logic m_arb_enable [4],
   input logic m_arb_read [4],
   input logic m_arb_write [4],
   input logic [4:0] m_arb_burstcount [4],
   input logic [25:0] m_arb_address [4],
   input logic [511:0] m_arb_writedata [4],
   input logic [63:0] m_arb_byteenable [4],
   output logic m_arb_stall [4],
   output logic m_wrp_ack [4],
   output logic m_rrp_datavalid [4],
   output logic [511:0] m_rrp_data [4],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic [4:0] mout_arb_burstcount,
   output logic [25:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2),
            .NUM_READ_MASTERS(4),
            .NUM_WRITE_MASTERS(4),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(26),
         .BYTEENA_W(64),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(26),
         .BYTEENA_W(64),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(26),
         .BYTEENA_W(64),
         .ID_W(2),
         .NUM_READ_MASTERS(4),
         .NUM_WRITE_MASTERS(4),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
      assign m[3].wrp_intf.ack = s.wrp_intf.ack;
      assign m[3].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
      assign m[3].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[3].rrp_intf.data = s.rrp_intf.data;
      assign m[3].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 6; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:sp
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) out_intf();

         // INST sp of acl_arb_staging_reg
         acl_arb_staging_reg
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         sp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = dp[0].out_intf.req.request;
   assign mout_arb_enable = dp[0].out_intf.req.enable;
   assign mout_arb_read = dp[0].out_intf.req.read;
   assign mout_arb_write = dp[0].out_intf.req.write;
   assign mout_arb_burstcount = dp[0].out_intf.req.burstcount;
   assign mout_arb_address = dp[0].out_intf.req.address;
   assign mout_arb_writedata = dp[0].out_intf.req.writedata;
   assign mout_arb_byteenable = dp[0].out_intf.req.byteenable;
   assign mout_arb_id = dp[0].out_intf.req.id;
   assign dp[0].out_intf.stall = mout_arb_stall;
   assign dp[0].in_intf.req = sp[0].out_intf.req;
   assign sp[0].out_intf.stall = dp[0].in_intf.stall;
   assign sp[0].in_intf.req = s.out_arb_intf.req;
   assign s.out_arb_intf.stall = sp[0].in_intf.stall;
   assign s.in_arb_intf.req = dp[1].out_intf.req;
   assign dp[1].out_intf.stall = s.in_arb_intf.stall;
   assign dp[1].in_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = dp[1].in_intf.stall;
   assign a[2].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[2].m1_intf.stall;
   assign a[0].m0_intf.req = dp[2].out_intf.req;
   assign dp[2].out_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = dp[3].out_intf.req;
   assign dp[3].out_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = dp[4].out_intf.req;
   assign dp[4].out_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = dp[5].out_intf.req;
   assign dp[5].out_intf.stall = a[1].m1_intf.stall;
   assign dp[2].in_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = dp[2].in_intf.stall;
   assign dp[3].in_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = dp[3].in_intf.stall;
   assign dp[4].in_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = dp[4].in_intf.stall;
   assign dp[5].in_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = dp[5].in_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE CLMiner_kernel_stable_system_interconnect_5
/////////////////////////////////////////////////////////////////
module CLMiner_kernel_stable_system_interconnect_5
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [7:0] m_arb_address [2],
   input logic [127:0] m_arb_writedata [2],
   input logic [15:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [127:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [7:0] mout_arb_address,
   output logic [127:0] mout_arb_writedata,
   output logic [15:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [127:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(128),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(8),
         .BYTEENA_W(16),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(8),
         .BYTEENA_W(16),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(128),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(8),
         .BYTEENA_W(16),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE CLMiner_kernel_stable_system_interconnect_6
/////////////////////////////////////////////////////////////////
module CLMiner_kernel_stable_system_interconnect_6
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [7:0] m_arb_address [1],
   input logic [127:0] m_arb_writedata [1],
   input logic [15:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [127:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [7:0] mout_arb_address,
   output logic [127:0] mout_arb_writedata,
   output logic [15:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [127:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(128),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(8),
         .BYTEENA_W(16),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(8),
         .BYTEENA_W(16),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(128),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(8),
         .BYTEENA_W(16),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE CLMiner_kernel_stable_system_interconnect_7
/////////////////////////////////////////////////////////////////
module CLMiner_kernel_stable_system_interconnect_7
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [7:0] m_arb_address [1],
   input logic [127:0] m_arb_writedata [1],
   input logic [15:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [127:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [7:0] mout_arb_address,
   output logic [127:0] mout_arb_writedata,
   output logic [15:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [127:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(128),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(8),
         .BYTEENA_W(16),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(8),
         .BYTEENA_W(16),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(128),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(8),
         .BYTEENA_W(16),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE CLMiner_kernel_stable_system_interconnect_8
/////////////////////////////////////////////////////////////////
module CLMiner_kernel_stable_system_interconnect_8
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [7:0] m_arb_address [2],
   input logic [127:0] m_arb_writedata [2],
   input logic [15:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [127:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [7:0] mout_arb_address,
   output logic [127:0] mout_arb_writedata,
   output logic [15:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [127:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(128),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(8),
         .BYTEENA_W(16),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(8),
         .BYTEENA_W(16),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(128),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(8),
         .BYTEENA_W(16),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(8),
            .BYTEENA_W(16),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

